                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module tm1638
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _ERROR_DATA
                                     12 	.globl _NUMBER_FONT
                                     13 	.globl _GPIO_ReadInputPin
                                     14 	.globl _GPIO_WriteLow
                                     15 	.globl _GPIO_WriteHigh
                                     16 	.globl _GPIO_Init
                                     17 	.globl _tm1638
                                     18 	.globl _TM1638_Init
                                     19 	.globl _sendChar
                                     20 	.globl _configDisplay
                                     21 	.globl _setDisplayDigit
                                     22 	.globl _clearDisplayDigit
                                     23 	.globl _setDisplay
                                     24 	.globl _clearDisplay
                                     25 	.globl _displayNumber
                                     26 	.globl _setLed
                                     27 	.globl _getKey
                                     28 ;--------------------------------------------------------
                                     29 ; ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DATA
      000000                         32 _tm1638::
      000000                         33 	.ds 8
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area INITIALIZED
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DABS (ABS)
                                     42 ;--------------------------------------------------------
                                     43 ; global & static initialisations
                                     44 ;--------------------------------------------------------
                                     45 	.area HOME
                                     46 	.area GSINIT
                                     47 	.area GSFINAL
                                     48 	.area GSINIT
                                     49 ;--------------------------------------------------------
                                     50 ; Home
                                     51 ;--------------------------------------------------------
                                     52 	.area HOME
                                     53 	.area HOME
                                     54 ;--------------------------------------------------------
                                     55 ; code
                                     56 ;--------------------------------------------------------
                                     57 	.area CODE
                                     58 ;	user/tm1638.c: 45: void TM1638_Init(GPIO_TypeDef* displayPort, GPIO_Pin_TypeDef StbPin, GPIO_Pin_TypeDef ClkPin, GPIO_Pin_TypeDef DataPin)
                                     59 ;	-----------------------------------------
                                     60 ;	 function TM1638_Init
                                     61 ;	-----------------------------------------
      000000                         62 _TM1638_Init:
      000000 52 0B            [ 2]   63 	sub	sp, #11
                                     64 ;	user/tm1638.c: 48: tm1638.displayPort = displayPort;
      000002 AEr00r00         [ 2]   65 	ldw	x, #_tm1638+0
      000005 16 0E            [ 2]   66 	ldw	y, (0x0e, sp)
      000007 FF               [ 2]   67 	ldw	(x), y
                                     68 ;	user/tm1638.c: 49: tm1638.StbPin = StbPin;
      000008 AEr00r00         [ 2]   69 	ldw	x, #_tm1638+0
      00000B 1F 0A            [ 2]   70 	ldw	(0x0a, sp), x
      00000D 1E 0A            [ 2]   71 	ldw	x, (0x0a, sp)
      00000F 5C               [ 2]   72 	incw	x
      000010 5C               [ 2]   73 	incw	x
      000011 1F 08            [ 2]   74 	ldw	(0x08, sp), x
      000013 1E 08            [ 2]   75 	ldw	x, (0x08, sp)
      000015 7B 10            [ 1]   76 	ld	a, (0x10, sp)
      000017 F7               [ 1]   77 	ld	(x), a
                                     78 ;	user/tm1638.c: 50: tm1638.ClkPin = ClkPin;
      000018 1E 0A            [ 2]   79 	ldw	x, (0x0a, sp)
      00001A 1C 00 03         [ 2]   80 	addw	x, #0x0003
      00001D 1F 06            [ 2]   81 	ldw	(0x06, sp), x
      00001F 1E 06            [ 2]   82 	ldw	x, (0x06, sp)
      000021 7B 11            [ 1]   83 	ld	a, (0x11, sp)
      000023 F7               [ 1]   84 	ld	(x), a
                                     85 ;	user/tm1638.c: 51: tm1638.DataPin = DataPin;
      000024 1E 0A            [ 2]   86 	ldw	x, (0x0a, sp)
      000026 7B 12            [ 1]   87 	ld	a, (0x12, sp)
      000028 E7 04            [ 1]   88 	ld	(0x0004, x), a
                                     89 ;	user/tm1638.c: 52: tm1638.intensity = 4;
      00002A 1E 0A            [ 2]   90 	ldw	x, (0x0a, sp)
      00002C 1C 00 05         [ 2]   91 	addw	x, #0x0005
      00002F 1F 04            [ 2]   92 	ldw	(0x04, sp), x
      000031 1E 04            [ 2]   93 	ldw	x, (0x04, sp)
      000033 A6 04            [ 1]   94 	ld	a, #0x04
      000035 F7               [ 1]   95 	ld	(x), a
                                     96 ;	user/tm1638.c: 53: tm1638.displays = 8;
      000036 1E 0A            [ 2]   97 	ldw	x, (0x0a, sp)
      000038 A6 08            [ 1]   98 	ld	a, #0x08
      00003A E7 06            [ 1]   99 	ld	(0x0006, x), a
                                    100 ;	user/tm1638.c: 54: tm1638.active = TRUE;
      00003C 1E 0A            [ 2]  101 	ldw	x, (0x0a, sp)
      00003E 1C 00 07         [ 2]  102 	addw	x, #0x0007
      000041 1F 02            [ 2]  103 	ldw	(0x02, sp), x
      000043 1E 02            [ 2]  104 	ldw	x, (0x02, sp)
      000045 A6 01            [ 1]  105 	ld	a, #0x01
      000047 F7               [ 1]  106 	ld	(x), a
                                    107 ;	user/tm1638.c: 55: GPIO_Init(tm1638.displayPort, tm1638.StbPin | tm1638.ClkPin | tm1638.DataPin, GPIO_MODE_OUT_OD_HIZ_FAST);
      000048 7B 10            [ 1]  108 	ld	a, (0x10, sp)
      00004A 1A 11            [ 1]  109 	or	a, (0x11, sp)
      00004C 1A 12            [ 1]  110 	or	a, (0x12, sp)
      00004E 1E 0A            [ 2]  111 	ldw	x, (0x0a, sp)
      000050 FE               [ 2]  112 	ldw	x, (x)
      000051 4B B0            [ 1]  113 	push	#0xb0
      000053 88               [ 1]  114 	push	a
      000054 89               [ 2]  115 	pushw	x
      000055 CDr00r00         [ 4]  116 	call	_GPIO_Init
      000058 5B 04            [ 2]  117 	addw	sp, #4
                                    118 ;	user/tm1638.c: 56: Set(tm1638.StbPin);
      00005A 1E 08            [ 2]  119 	ldw	x, (0x08, sp)
      00005C F6               [ 1]  120 	ld	a, (x)
      00005D 1E 0A            [ 2]  121 	ldw	x, (0x0a, sp)
      00005F FE               [ 2]  122 	ldw	x, (x)
      000060 88               [ 1]  123 	push	a
      000061 89               [ 2]  124 	pushw	x
      000062 CDr00r00         [ 4]  125 	call	_GPIO_WriteHigh
      000065 5B 03            [ 2]  126 	addw	sp, #3
                                    127 ;	user/tm1638.c: 57: Set(tm1638.ClkPin);
      000067 1E 06            [ 2]  128 	ldw	x, (0x06, sp)
      000069 F6               [ 1]  129 	ld	a, (x)
      00006A 1E 0A            [ 2]  130 	ldw	x, (0x0a, sp)
      00006C FE               [ 2]  131 	ldw	x, (x)
      00006D 88               [ 1]  132 	push	a
      00006E 89               [ 2]  133 	pushw	x
      00006F CDr00r00         [ 4]  134 	call	_GPIO_WriteHigh
      000072 5B 03            [ 2]  135 	addw	sp, #3
                                    136 ;	user/tm1638.c: 58: writeCmd(0x40); // send cmd write data
      000074 4B 40            [ 1]  137 	push	#0x40
      000076 CDr01rA7         [ 4]  138 	call	_writeCmd
      000079 84               [ 1]  139 	pop	a
                                    140 ;	user/tm1638.c: 59: writeCmd(0x80|(tm1638.active ? 8 : 0)|tm1638.intensity); //display and brightness = 4
      00007A 1E 02            [ 2]  141 	ldw	x, (0x02, sp)
      00007C F6               [ 1]  142 	ld	a, (x)
      00007D 4D               [ 1]  143 	tnz	a
      00007E 27 03            [ 1]  144 	jreq	00106$
      000080 A6 08            [ 1]  145 	ld	a, #0x08
      000082 21                     146 	.byte 0x21
      000083                        147 00106$:
      000083 4F               [ 1]  148 	clr	a
      000084                        149 00107$:
      000084 AA 80            [ 1]  150 	or	a, #0x80
      000086 6B 01            [ 1]  151 	ld	(0x01, sp), a
      000088 1E 04            [ 2]  152 	ldw	x, (0x04, sp)
      00008A F6               [ 1]  153 	ld	a, (x)
      00008B 1A 01            [ 1]  154 	or	a, (0x01, sp)
      00008D 88               [ 1]  155 	push	a
      00008E CDr01rA7         [ 4]  156 	call	_writeCmd
      000091 84               [ 1]  157 	pop	a
                                    158 ;	user/tm1638.c: 60: Reset(tm1638.StbPin);
      000092 1E 08            [ 2]  159 	ldw	x, (0x08, sp)
      000094 F6               [ 1]  160 	ld	a, (x)
      000095 1E 0A            [ 2]  161 	ldw	x, (0x0a, sp)
      000097 FE               [ 2]  162 	ldw	x, (x)
      000098 88               [ 1]  163 	push	a
      000099 89               [ 2]  164 	pushw	x
      00009A CDr00r00         [ 4]  165 	call	_GPIO_WriteLow
      00009D 5B 03            [ 2]  166 	addw	sp, #3
                                    167 ;	user/tm1638.c: 61: writeByte(0xC0);
      00009F 4B C0            [ 1]  168 	push	#0xc0
      0000A1 CDr00rC1         [ 4]  169 	call	_writeByte
      0000A4 84               [ 1]  170 	pop	a
                                    171 ;	user/tm1638.c: 62: for(i = 0; i < 16; i++)
      0000A5 4F               [ 1]  172 	clr	a
      0000A6                        173 00102$:
                                    174 ;	user/tm1638.c: 63: writeByte(0x00);
      0000A6 88               [ 1]  175 	push	a
      0000A7 4B 00            [ 1]  176 	push	#0x00
      0000A9 CDr00rC1         [ 4]  177 	call	_writeByte
      0000AC 84               [ 1]  178 	pop	a
      0000AD 84               [ 1]  179 	pop	a
                                    180 ;	user/tm1638.c: 62: for(i = 0; i < 16; i++)
      0000AE 4C               [ 1]  181 	inc	a
      0000AF A1 10            [ 1]  182 	cp	a, #0x10
      0000B1 25 F3            [ 1]  183 	jrc	00102$
                                    184 ;	user/tm1638.c: 64: Set(tm1638.StbPin);
      0000B3 1E 08            [ 2]  185 	ldw	x, (0x08, sp)
      0000B5 F6               [ 1]  186 	ld	a, (x)
      0000B6 1E 0A            [ 2]  187 	ldw	x, (0x0a, sp)
      0000B8 FE               [ 2]  188 	ldw	x, (x)
      0000B9 88               [ 1]  189 	push	a
      0000BA 89               [ 2]  190 	pushw	x
      0000BB CDr00r00         [ 4]  191 	call	_GPIO_WriteHigh
      0000BE 5B 0E            [ 2]  192 	addw	sp, #14
      0000C0 81               [ 4]  193 	ret
                                    194 ;	user/tm1638.c: 67: static void writeByte(uint8_t byte)
                                    195 ;	-----------------------------------------
                                    196 ;	 function writeByte
                                    197 ;	-----------------------------------------
      0000C1                        198 _writeByte:
      0000C1 52 05            [ 2]  199 	sub	sp, #5
                                    200 ;	user/tm1638.c: 70: for(i = 0; i < 8; i++)
      0000C3 AEr00r00         [ 2]  201 	ldw	x, #_tm1638+0
      0000C6 1F 02            [ 2]  202 	ldw	(0x02, sp), x
      0000C8 1E 02            [ 2]  203 	ldw	x, (0x02, sp)
      0000CA 1C 00 03         [ 2]  204 	addw	x, #0x0003
      0000CD 1F 04            [ 2]  205 	ldw	(0x04, sp), x
      0000CF 0F 01            [ 1]  206 	clr	(0x01, sp)
      0000D1                        207 00105$:
                                    208 ;	user/tm1638.c: 72: Reset(tm1638.ClkPin); //input Data at rising edge of the clock
      0000D1 1E 04            [ 2]  209 	ldw	x, (0x04, sp)
      0000D3 F6               [ 1]  210 	ld	a, (x)
      0000D4 1E 02            [ 2]  211 	ldw	x, (0x02, sp)
      0000D6 FE               [ 2]  212 	ldw	x, (x)
      0000D7 88               [ 1]  213 	push	a
      0000D8 89               [ 2]  214 	pushw	x
      0000D9 CDr00r00         [ 4]  215 	call	_GPIO_WriteLow
      0000DC 5B 03            [ 2]  216 	addw	sp, #3
      0000DE 1E 02            [ 2]  217 	ldw	x, (0x02, sp)
      0000E0 FE               [ 2]  218 	ldw	x, (x)
                                    219 ;	user/tm1638.c: 73: if(byte&0x01) Set(tm1638.DataPin);
      0000E1 16 02            [ 2]  220 	ldw	y, (0x02, sp)
      0000E3 90 E6 04         [ 1]  221 	ld	a, (0x4, y)
      0000E6 88               [ 1]  222 	push	a
      0000E7 7B 09            [ 1]  223 	ld	a, (0x09, sp)
      0000E9 44               [ 1]  224 	srl	a
      0000EA 84               [ 1]  225 	pop	a
      0000EB 24 09            [ 1]  226 	jrnc	00102$
      0000ED 88               [ 1]  227 	push	a
      0000EE 89               [ 2]  228 	pushw	x
      0000EF CDr00r00         [ 4]  229 	call	_GPIO_WriteHigh
      0000F2 5B 03            [ 2]  230 	addw	sp, #3
      0000F4 20 07            [ 2]  231 	jra	00103$
      0000F6                        232 00102$:
                                    233 ;	user/tm1638.c: 74: else Reset(tm1638.DataPin);
      0000F6 88               [ 1]  234 	push	a
      0000F7 89               [ 2]  235 	pushw	x
      0000F8 CDr00r00         [ 4]  236 	call	_GPIO_WriteLow
      0000FB 5B 03            [ 2]  237 	addw	sp, #3
      0000FD                        238 00103$:
                                    239 ;	user/tm1638.c: 75: Set(tm1638.ClkPin);
      0000FD 1E 04            [ 2]  240 	ldw	x, (0x04, sp)
      0000FF F6               [ 1]  241 	ld	a, (x)
      000100 1E 02            [ 2]  242 	ldw	x, (0x02, sp)
      000102 FE               [ 2]  243 	ldw	x, (x)
      000103 88               [ 1]  244 	push	a
      000104 89               [ 2]  245 	pushw	x
      000105 CDr00r00         [ 4]  246 	call	_GPIO_WriteHigh
      000108 5B 03            [ 2]  247 	addw	sp, #3
                                    248 ;	user/tm1638.c: 76: byte>>=1;
      00010A 04 08            [ 1]  249 	srl	(0x08, sp)
                                    250 ;	user/tm1638.c: 70: for(i = 0; i < 8; i++)
      00010C 0C 01            [ 1]  251 	inc	(0x01, sp)
      00010E 7B 01            [ 1]  252 	ld	a, (0x01, sp)
      000110 A1 08            [ 1]  253 	cp	a, #0x08
      000112 25 BD            [ 1]  254 	jrc	00105$
      000114 5B 05            [ 2]  255 	addw	sp, #5
      000116 81               [ 4]  256 	ret
                                    257 ;	user/tm1638.c: 80: static uint8_t readByte(void)
                                    258 ;	-----------------------------------------
                                    259 ;	 function readByte
                                    260 ;	-----------------------------------------
      000117                        261 _readByte:
      000117 52 08            [ 2]  262 	sub	sp, #8
                                    263 ;	user/tm1638.c: 83: uint8_t temp = 0x00;
      000119 0F 01            [ 1]  264 	clr	(0x01, sp)
                                    265 ;	user/tm1638.c: 84: GPIO_Init(tm1638.displayPort, tm1638.DataPin, GPIO_MODE_IN_PU_NO_IT);
      00011B AEr00r00         [ 2]  266 	ldw	x, #_tm1638+0
      00011E 1F 07            [ 2]  267 	ldw	(0x07, sp), x
      000120 1E 07            [ 2]  268 	ldw	x, (0x07, sp)
      000122 1C 00 04         [ 2]  269 	addw	x, #0x0004
      000125 1F 05            [ 2]  270 	ldw	(0x05, sp), x
      000127 1E 05            [ 2]  271 	ldw	x, (0x05, sp)
      000129 F6               [ 1]  272 	ld	a, (x)
      00012A 1E 07            [ 2]  273 	ldw	x, (0x07, sp)
      00012C FE               [ 2]  274 	ldw	x, (x)
      00012D 4B 40            [ 1]  275 	push	#0x40
      00012F 88               [ 1]  276 	push	a
      000130 89               [ 2]  277 	pushw	x
      000131 CDr00r00         [ 4]  278 	call	_GPIO_Init
      000134 5B 04            [ 2]  279 	addw	sp, #4
                                    280 ;	user/tm1638.c: 85: Set(tm1638.DataPin);
      000136 1E 05            [ 2]  281 	ldw	x, (0x05, sp)
      000138 F6               [ 1]  282 	ld	a, (x)
      000139 1E 07            [ 2]  283 	ldw	x, (0x07, sp)
      00013B FE               [ 2]  284 	ldw	x, (x)
      00013C 88               [ 1]  285 	push	a
      00013D 89               [ 2]  286 	pushw	x
      00013E CDr00r00         [ 4]  287 	call	_GPIO_WriteHigh
      000141 5B 03            [ 2]  288 	addw	sp, #3
                                    289 ;	user/tm1638.c: 86: for(i = 0; i < 8; i++)
      000143 1E 07            [ 2]  290 	ldw	x, (0x07, sp)
      000145 1C 00 03         [ 2]  291 	addw	x, #0x0003
      000148 1F 03            [ 2]  292 	ldw	(0x03, sp), x
      00014A 0F 02            [ 1]  293 	clr	(0x02, sp)
      00014C                        294 00104$:
                                    295 ;	user/tm1638.c: 88: temp>>=1;
      00014C 04 01            [ 1]  296 	srl	(0x01, sp)
                                    297 ;	user/tm1638.c: 89: Set(tm1638.ClkPin); //Output Data at falling edge of the clock
      00014E 1E 03            [ 2]  298 	ldw	x, (0x03, sp)
      000150 F6               [ 1]  299 	ld	a, (x)
      000151 1E 07            [ 2]  300 	ldw	x, (0x07, sp)
      000153 FE               [ 2]  301 	ldw	x, (x)
      000154 88               [ 1]  302 	push	a
      000155 89               [ 2]  303 	pushw	x
      000156 CDr00r00         [ 4]  304 	call	_GPIO_WriteHigh
      000159 5B 03            [ 2]  305 	addw	sp, #3
                                    306 ;	user/tm1638.c: 90: if(Get(tm1638.DataPin)) temp |= 0x80;
      00015B 1E 05            [ 2]  307 	ldw	x, (0x05, sp)
      00015D F6               [ 1]  308 	ld	a, (x)
      00015E 1E 07            [ 2]  309 	ldw	x, (0x07, sp)
      000160 FE               [ 2]  310 	ldw	x, (x)
      000161 88               [ 1]  311 	push	a
      000162 89               [ 2]  312 	pushw	x
      000163 CDr00r00         [ 4]  313 	call	_GPIO_ReadInputPin
      000166 5B 03            [ 2]  314 	addw	sp, #3
      000168 4D               [ 1]  315 	tnz	a
      000169 27 06            [ 1]  316 	jreq	00102$
      00016B 7B 01            [ 1]  317 	ld	a, (0x01, sp)
      00016D AA 80            [ 1]  318 	or	a, #0x80
      00016F 6B 01            [ 1]  319 	ld	(0x01, sp), a
      000171                        320 00102$:
                                    321 ;	user/tm1638.c: 91: Reset(tm1638.ClkPin);
      000171 1E 03            [ 2]  322 	ldw	x, (0x03, sp)
      000173 F6               [ 1]  323 	ld	a, (x)
      000174 1E 07            [ 2]  324 	ldw	x, (0x07, sp)
      000176 FE               [ 2]  325 	ldw	x, (x)
      000177 88               [ 1]  326 	push	a
      000178 89               [ 2]  327 	pushw	x
      000179 CDr00r00         [ 4]  328 	call	_GPIO_WriteLow
      00017C 5B 03            [ 2]  329 	addw	sp, #3
                                    330 ;	user/tm1638.c: 86: for(i = 0; i < 8; i++)
      00017E 0C 02            [ 1]  331 	inc	(0x02, sp)
      000180 7B 02            [ 1]  332 	ld	a, (0x02, sp)
      000182 A1 08            [ 1]  333 	cp	a, #0x08
      000184 25 C6            [ 1]  334 	jrc	00104$
                                    335 ;	user/tm1638.c: 93: GPIO_Init(tm1638.displayPort, tm1638.DataPin, GPIO_MODE_OUT_OD_HIZ_FAST);
      000186 1E 05            [ 2]  336 	ldw	x, (0x05, sp)
      000188 F6               [ 1]  337 	ld	a, (x)
      000189 1E 07            [ 2]  338 	ldw	x, (0x07, sp)
      00018B FE               [ 2]  339 	ldw	x, (x)
      00018C 4B B0            [ 1]  340 	push	#0xb0
      00018E 88               [ 1]  341 	push	a
      00018F 89               [ 2]  342 	pushw	x
      000190 CDr00r00         [ 4]  343 	call	_GPIO_Init
      000193 5B 04            [ 2]  344 	addw	sp, #4
                                    345 ;	user/tm1638.c: 94: Reset(tm1638.DataPin);
      000195 1E 05            [ 2]  346 	ldw	x, (0x05, sp)
      000197 F6               [ 1]  347 	ld	a, (x)
      000198 1E 07            [ 2]  348 	ldw	x, (0x07, sp)
      00019A FE               [ 2]  349 	ldw	x, (x)
      00019B 88               [ 1]  350 	push	a
      00019C 89               [ 2]  351 	pushw	x
      00019D CDr00r00         [ 4]  352 	call	_GPIO_WriteLow
      0001A0 5B 03            [ 2]  353 	addw	sp, #3
                                    354 ;	user/tm1638.c: 95: return temp;
      0001A2 7B 01            [ 1]  355 	ld	a, (0x01, sp)
      0001A4 5B 08            [ 2]  356 	addw	sp, #8
      0001A6 81               [ 4]  357 	ret
                                    358 ;	user/tm1638.c: 98: static void writeCmd(uint8_t cmd)
                                    359 ;	-----------------------------------------
                                    360 ;	 function writeCmd
                                    361 ;	-----------------------------------------
      0001A7                        362 _writeCmd:
      0001A7 89               [ 2]  363 	pushw	x
                                    364 ;	user/tm1638.c: 100: Set(tm1638.StbPin); 
      0001A8 AEr00r00         [ 2]  365 	ldw	x, #_tm1638+0
      0001AB 1F 01            [ 2]  366 	ldw	(0x01, sp), x
      0001AD 1E 01            [ 2]  367 	ldw	x, (0x01, sp)
      0001AF 5C               [ 2]  368 	incw	x
      0001B0 5C               [ 2]  369 	incw	x
      0001B1 F6               [ 1]  370 	ld	a, (x)
      0001B2 16 01            [ 2]  371 	ldw	y, (0x01, sp)
      0001B4 90 FE            [ 2]  372 	ldw	y, (y)
      0001B6 89               [ 2]  373 	pushw	x
      0001B7 88               [ 1]  374 	push	a
      0001B8 90 89            [ 2]  375 	pushw	y
      0001BA CDr00r00         [ 4]  376 	call	_GPIO_WriteHigh
      0001BD 5B 03            [ 2]  377 	addw	sp, #3
      0001BF 85               [ 2]  378 	popw	x
                                    379 ;	user/tm1638.c: 101: Reset(tm1638.StbPin); // falling edge STB is an instruction
      0001C0 F6               [ 1]  380 	ld	a, (x)
      0001C1 1E 01            [ 2]  381 	ldw	x, (0x01, sp)
      0001C3 FE               [ 2]  382 	ldw	x, (x)
      0001C4 88               [ 1]  383 	push	a
      0001C5 89               [ 2]  384 	pushw	x
      0001C6 CDr00r00         [ 4]  385 	call	_GPIO_WriteLow
      0001C9 5B 03            [ 2]  386 	addw	sp, #3
                                    387 ;	user/tm1638.c: 102: writeByte(cmd); // Send command
      0001CB 7B 05            [ 1]  388 	ld	a, (0x05, sp)
      0001CD 88               [ 1]  389 	push	a
      0001CE CDr00rC1         [ 4]  390 	call	_writeByte
      0001D1 84               [ 1]  391 	pop	a
      0001D2 85               [ 2]  392 	popw	x
      0001D3 81               [ 4]  393 	ret
                                    394 ;	user/tm1638.c: 105: static void writeData(uint8_t addr, uint8_t data)
                                    395 ;	-----------------------------------------
                                    396 ;	 function writeData
                                    397 ;	-----------------------------------------
      0001D4                        398 _writeData:
                                    399 ;	user/tm1638.c: 107: writeCmd(0x44); //Setting Data (B7B6: 01): Normal Mode, Fixed addr, Write data
      0001D4 4B 44            [ 1]  400 	push	#0x44
      0001D6 CDr01rA7         [ 4]  401 	call	_writeCmd
      0001D9 84               [ 1]  402 	pop	a
                                    403 ;	user/tm1638.c: 108: writeCmd(0xC0|addr); //Setting Address (B7B6: 11): Display addr: 00H-0FH
      0001DA 7B 03            [ 1]  404 	ld	a, (0x03, sp)
      0001DC AA C0            [ 1]  405 	or	a, #0xc0
      0001DE 88               [ 1]  406 	push	a
      0001DF CDr01rA7         [ 4]  407 	call	_writeCmd
      0001E2 84               [ 1]  408 	pop	a
                                    409 ;	user/tm1638.c: 109: writeByte(data); // Send Data
      0001E3 7B 04            [ 1]  410 	ld	a, (0x04, sp)
      0001E5 88               [ 1]  411 	push	a
      0001E6 CDr00rC1         [ 4]  412 	call	_writeByte
      0001E9 84               [ 1]  413 	pop	a
      0001EA 81               [ 4]  414 	ret
                                    415 ;	user/tm1638.c: 113: void sendChar(uint8_t pos, uint8_t data, bool dot)
                                    416 ;	-----------------------------------------
                                    417 ;	 function sendChar
                                    418 ;	-----------------------------------------
      0001EB                        419 _sendChar:
                                    420 ;	user/tm1638.c: 115: writeData(pos << 1, data | (dot ? 0x80: 0x00));
      0001EB 0D 05            [ 1]  421 	tnz	(0x05, sp)
      0001ED 27 03            [ 1]  422 	jreq	00103$
      0001EF A6 80            [ 1]  423 	ld	a, #0x80
      0001F1 21                     424 	.byte 0x21
      0001F2                        425 00103$:
      0001F2 4F               [ 1]  426 	clr	a
      0001F3                        427 00104$:
      0001F3 1A 04            [ 1]  428 	or	a, (0x04, sp)
      0001F5 97               [ 1]  429 	ld	xl, a
      0001F6 7B 03            [ 1]  430 	ld	a, (0x03, sp)
      0001F8 48               [ 1]  431 	sll	a
      0001F9 89               [ 2]  432 	pushw	x
      0001FA 5B 01            [ 2]  433 	addw	sp, #1
      0001FC 88               [ 1]  434 	push	a
      0001FD CDr01rD4         [ 4]  435 	call	_writeData
      000200 85               [ 2]  436 	popw	x
      000201 81               [ 4]  437 	ret
                                    438 ;	user/tm1638.c: 118: void configDisplay(bool active, uint8_t intensity)
                                    439 ;	-----------------------------------------
                                    440 ;	 function configDisplay
                                    441 ;	-----------------------------------------
      000202                        442 _configDisplay:
      000202 52 05            [ 2]  443 	sub	sp, #5
                                    444 ;	user/tm1638.c: 120: tm1638.intensity = intensity;
      000204 AEr00r00         [ 2]  445 	ldw	x, #_tm1638+0
      000207 1F 04            [ 2]  446 	ldw	(0x04, sp), x
      000209 1E 04            [ 2]  447 	ldw	x, (0x04, sp)
      00020B 1C 00 05         [ 2]  448 	addw	x, #0x0005
      00020E 7B 09            [ 1]  449 	ld	a, (0x09, sp)
      000210 F7               [ 1]  450 	ld	(x), a
                                    451 ;	user/tm1638.c: 121: tm1638.active = active;
      000211 16 04            [ 2]  452 	ldw	y, (0x04, sp)
      000213 72 A9 00 07      [ 2]  453 	addw	y, #0x0007
      000217 7B 08            [ 1]  454 	ld	a, (0x08, sp)
      000219 90 F7            [ 1]  455 	ld	(y), a
                                    456 ;	user/tm1638.c: 122: writeCmd(0x80|(tm1638.active ? 8 : 0)| tm1638.intensity); //Display control (B7B6: 10): B3: 1: enable, 0: disable; B2B1B0: 0-7: brighness
      00021B 0D 08            [ 1]  457 	tnz	(0x08, sp)
      00021D 27 03            [ 1]  458 	jreq	00103$
      00021F A6 08            [ 1]  459 	ld	a, #0x08
      000221 21                     460 	.byte 0x21
      000222                        461 00103$:
      000222 4F               [ 1]  462 	clr	a
      000223                        463 00104$:
      000223 AA 80            [ 1]  464 	or	a, #0x80
      000225 6B 03            [ 1]  465 	ld	(0x03, sp), a
      000227 F6               [ 1]  466 	ld	a, (x)
      000228 1A 03            [ 1]  467 	or	a, (0x03, sp)
      00022A 88               [ 1]  468 	push	a
      00022B CDr01rA7         [ 4]  469 	call	_writeCmd
      00022E 84               [ 1]  470 	pop	a
                                    471 ;	user/tm1638.c: 123: Reset(tm1638.StbPin);
      00022F 1E 04            [ 2]  472 	ldw	x, (0x04, sp)
      000231 5C               [ 2]  473 	incw	x
      000232 5C               [ 2]  474 	incw	x
      000233 1F 01            [ 2]  475 	ldw	(0x01, sp), x
      000235 1E 01            [ 2]  476 	ldw	x, (0x01, sp)
      000237 F6               [ 1]  477 	ld	a, (x)
      000238 1E 04            [ 2]  478 	ldw	x, (0x04, sp)
      00023A FE               [ 2]  479 	ldw	x, (x)
      00023B 88               [ 1]  480 	push	a
      00023C 89               [ 2]  481 	pushw	x
      00023D CDr00r00         [ 4]  482 	call	_GPIO_WriteLow
      000240 5B 03            [ 2]  483 	addw	sp, #3
                                    484 ;	user/tm1638.c: 124: Reset(tm1638.ClkPin);
      000242 1E 04            [ 2]  485 	ldw	x, (0x04, sp)
      000244 1C 00 03         [ 2]  486 	addw	x, #0x0003
      000247 F6               [ 1]  487 	ld	a, (x)
      000248 16 04            [ 2]  488 	ldw	y, (0x04, sp)
      00024A 90 FE            [ 2]  489 	ldw	y, (y)
      00024C 89               [ 2]  490 	pushw	x
      00024D 88               [ 1]  491 	push	a
      00024E 90 89            [ 2]  492 	pushw	y
      000250 CDr00r00         [ 4]  493 	call	_GPIO_WriteLow
      000253 5B 03            [ 2]  494 	addw	sp, #3
      000255 85               [ 2]  495 	popw	x
                                    496 ;	user/tm1638.c: 125: Set(tm1638.ClkPin);
      000256 F6               [ 1]  497 	ld	a, (x)
      000257 1E 04            [ 2]  498 	ldw	x, (0x04, sp)
      000259 FE               [ 2]  499 	ldw	x, (x)
      00025A 88               [ 1]  500 	push	a
      00025B 89               [ 2]  501 	pushw	x
      00025C CDr00r00         [ 4]  502 	call	_GPIO_WriteHigh
      00025F 5B 03            [ 2]  503 	addw	sp, #3
                                    504 ;	user/tm1638.c: 126: Set(tm1638.StbPin);
      000261 1E 01            [ 2]  505 	ldw	x, (0x01, sp)
      000263 F6               [ 1]  506 	ld	a, (x)
      000264 1E 04            [ 2]  507 	ldw	x, (0x04, sp)
      000266 FE               [ 2]  508 	ldw	x, (x)
      000267 88               [ 1]  509 	push	a
      000268 89               [ 2]  510 	pushw	x
      000269 CDr00r00         [ 4]  511 	call	_GPIO_WriteHigh
      00026C 5B 08            [ 2]  512 	addw	sp, #8
      00026E 81               [ 4]  513 	ret
                                    514 ;	user/tm1638.c: 129: void setDisplayDigit(uint8_t digit, uint8_t pos, bool dot, const uint8_t numberFont[])
                                    515 ;	-----------------------------------------
                                    516 ;	 function setDisplayDigit
                                    517 ;	-----------------------------------------
      00026F                        518 _setDisplayDigit:
                                    519 ;	user/tm1638.c: 131: sendChar(pos, numberFont[digit & 0xF], dot);
      00026F 7B 03            [ 1]  520 	ld	a, (0x03, sp)
      000271 A4 0F            [ 1]  521 	and	a, #0x0f
      000273 5F               [ 1]  522 	clrw	x
      000274 97               [ 1]  523 	ld	xl, a
      000275 72 FB 06         [ 2]  524 	addw	x, (0x06, sp)
      000278 F6               [ 1]  525 	ld	a, (x)
      000279 97               [ 1]  526 	ld	xl, a
      00027A 7B 05            [ 1]  527 	ld	a, (0x05, sp)
      00027C 88               [ 1]  528 	push	a
      00027D 9F               [ 1]  529 	ld	a, xl
      00027E 88               [ 1]  530 	push	a
      00027F 7B 06            [ 1]  531 	ld	a, (0x06, sp)
      000281 88               [ 1]  532 	push	a
      000282 CDr01rEB         [ 4]  533 	call	_sendChar
      000285 5B 03            [ 2]  534 	addw	sp, #3
      000287 81               [ 4]  535 	ret
                                    536 ;	user/tm1638.c: 134: void clearDisplayDigit(uint8_t pos, bool dot)
                                    537 ;	-----------------------------------------
                                    538 ;	 function clearDisplayDigit
                                    539 ;	-----------------------------------------
      000288                        540 _clearDisplayDigit:
                                    541 ;	user/tm1638.c: 136: sendChar(pos, 0, dot);
      000288 7B 04            [ 1]  542 	ld	a, (0x04, sp)
      00028A 88               [ 1]  543 	push	a
      00028B 4B 00            [ 1]  544 	push	#0x00
      00028D 7B 05            [ 1]  545 	ld	a, (0x05, sp)
      00028F 88               [ 1]  546 	push	a
      000290 CDr01rEB         [ 4]  547 	call	_sendChar
      000293 5B 03            [ 2]  548 	addw	sp, #3
      000295 81               [ 4]  549 	ret
                                    550 ;	user/tm1638.c: 139: void setDisplay(const uint8_t values[], uint8_t size)
                                    551 ;	-----------------------------------------
                                    552 ;	 function setDisplay
                                    553 ;	-----------------------------------------
      000296                        554 _setDisplay:
                                    555 ;	user/tm1638.c: 142: for(i = 0; i<size; i++) 
      000296 4F               [ 1]  556 	clr	a
      000297                        557 00103$:
      000297 11 05            [ 1]  558 	cp	a, (0x05, sp)
      000299 25 01            [ 1]  559 	jrc	00116$
      00029B 81               [ 4]  560 	ret
      00029C                        561 00116$:
                                    562 ;	user/tm1638.c: 143: sendChar(i, values[i], 0);
      00029C 5F               [ 1]  563 	clrw	x
      00029D 97               [ 1]  564 	ld	xl, a
      00029E 72 FB 03         [ 2]  565 	addw	x, (0x03, sp)
      0002A1 88               [ 1]  566 	push	a
      0002A2 F6               [ 1]  567 	ld	a, (x)
      0002A3 97               [ 1]  568 	ld	xl, a
      0002A4 84               [ 1]  569 	pop	a
      0002A5 88               [ 1]  570 	push	a
      0002A6 4B 00            [ 1]  571 	push	#0x00
      0002A8 89               [ 2]  572 	pushw	x
      0002A9 5B 01            [ 2]  573 	addw	sp, #1
      0002AB 88               [ 1]  574 	push	a
      0002AC CDr01rEB         [ 4]  575 	call	_sendChar
      0002AF 5B 03            [ 2]  576 	addw	sp, #3
      0002B1 84               [ 1]  577 	pop	a
                                    578 ;	user/tm1638.c: 142: for(i = 0; i<size; i++) 
      0002B2 4C               [ 1]  579 	inc	a
      0002B3 20 E2            [ 2]  580 	jra	00103$
      0002B5 81               [ 4]  581 	ret
                                    582 ;	user/tm1638.c: 146: void clearDisplay(void)
                                    583 ;	-----------------------------------------
                                    584 ;	 function clearDisplay
                                    585 ;	-----------------------------------------
      0002B6                        586 _clearDisplay:
                                    587 ;	user/tm1638.c: 149: for(i = 0; i < 8; i++)
      0002B6 4F               [ 1]  588 	clr	a
      0002B7                        589 00102$:
                                    590 ;	user/tm1638.c: 150: writeData(i << 1, 0);
      0002B7 97               [ 1]  591 	ld	xl, a
      0002B8 58               [ 2]  592 	sllw	x
      0002B9 88               [ 1]  593 	push	a
      0002BA 4B 00            [ 1]  594 	push	#0x00
      0002BC 89               [ 2]  595 	pushw	x
      0002BD 5B 01            [ 2]  596 	addw	sp, #1
      0002BF CDr01rD4         [ 4]  597 	call	_writeData
      0002C2 85               [ 2]  598 	popw	x
      0002C3 84               [ 1]  599 	pop	a
                                    600 ;	user/tm1638.c: 149: for(i = 0; i < 8; i++)
      0002C4 4C               [ 1]  601 	inc	a
      0002C5 A1 08            [ 1]  602 	cp	a, #0x08
      0002C7 25 EE            [ 1]  603 	jrc	00102$
      0002C9 81               [ 4]  604 	ret
                                    605 ;	user/tm1638.c: 165: void displayNumber(uint8_t pos, uint8_t number, bool dot)
                                    606 ;	-----------------------------------------
                                    607 ;	 function displayNumber
                                    608 ;	-----------------------------------------
      0002CA                        609 _displayNumber:
                                    610 ;	user/tm1638.c: 167: setDisplayDigit(number, pos, dot, NUMBER_FONT);
      0002CA AEr03r4A         [ 2]  611 	ldw	x, #_NUMBER_FONT+0
      0002CD 89               [ 2]  612 	pushw	x
      0002CE 7B 07            [ 1]  613 	ld	a, (0x07, sp)
      0002D0 88               [ 1]  614 	push	a
      0002D1 7B 06            [ 1]  615 	ld	a, (0x06, sp)
      0002D3 88               [ 1]  616 	push	a
      0002D4 7B 08            [ 1]  617 	ld	a, (0x08, sp)
      0002D6 88               [ 1]  618 	push	a
      0002D7 CDr02r6F         [ 4]  619 	call	_setDisplayDigit
      0002DA 5B 05            [ 2]  620 	addw	sp, #5
      0002DC 81               [ 4]  621 	ret
                                    622 ;	user/tm1638.c: 170: void setLed(uint8_t color, uint8_t pos)
                                    623 ;	-----------------------------------------
                                    624 ;	 function setLed
                                    625 ;	-----------------------------------------
      0002DD                        626 _setLed:
                                    627 ;	user/tm1638.c: 172: writeData((pos<<1)+1, color);
      0002DD 7B 04            [ 1]  628 	ld	a, (0x04, sp)
      0002DF 48               [ 1]  629 	sll	a
      0002E0 4C               [ 1]  630 	inc	a
      0002E1 97               [ 1]  631 	ld	xl, a
      0002E2 7B 03            [ 1]  632 	ld	a, (0x03, sp)
      0002E4 88               [ 1]  633 	push	a
      0002E5 9F               [ 1]  634 	ld	a, xl
      0002E6 88               [ 1]  635 	push	a
      0002E7 CDr01rD4         [ 4]  636 	call	_writeData
      0002EA 85               [ 2]  637 	popw	x
      0002EB 81               [ 4]  638 	ret
                                    639 ;	user/tm1638.c: 177: uint8_t getKey(void)
                                    640 ;	-----------------------------------------
                                    641 ;	 function getKey
                                    642 ;	-----------------------------------------
      0002EC                        643 _getKey:
      0002EC 52 06            [ 2]  644 	sub	sp, #6
                                    645 ;	user/tm1638.c: 181: uint16_t key2 = 0x00;
      0002EE 5F               [ 1]  646 	clrw	x
      0002EF 1F 01            [ 2]  647 	ldw	(0x01, sp), x
                                    648 ;	user/tm1638.c: 182: writeCmd(0x42);
      0002F1 4B 42            [ 1]  649 	push	#0x42
      0002F3 CDr01rA7         [ 4]  650 	call	_writeCmd
      0002F6 84               [ 1]  651 	pop	a
                                    652 ;	user/tm1638.c: 183: Set(tm1638.DataPin);
      0002F7 AEr00r00         [ 2]  653 	ldw	x, #_tm1638+0
      0002FA 1F 05            [ 2]  654 	ldw	(0x05, sp), x
      0002FC 16 05            [ 2]  655 	ldw	y, (0x05, sp)
      0002FE 90 E6 04         [ 1]  656 	ld	a, (0x4, y)
      000301 FE               [ 2]  657 	ldw	x, (x)
      000302 88               [ 1]  658 	push	a
      000303 89               [ 2]  659 	pushw	x
      000304 CDr00r00         [ 4]  660 	call	_GPIO_WriteHigh
      000307 5B 03            [ 2]  661 	addw	sp, #3
                                    662 ;	user/tm1638.c: 184: for(i = 0; i < 4; i++)
      000309 0F 03            [ 1]  663 	clr	(0x03, sp)
      00030B                        664 00105$:
                                    665 ;	user/tm1638.c: 186: key1 = readByte();
      00030B CDr01r17         [ 4]  666 	call	_readByte
                                    667 ;	user/tm1638.c: 187: key2 |= (key1<<i);
      00030E 5F               [ 1]  668 	clrw	x
      00030F 97               [ 1]  669 	ld	xl, a
      000310 7B 03            [ 1]  670 	ld	a, (0x03, sp)
      000312 27 04            [ 1]  671 	jreq	00133$
      000314                        672 00132$:
      000314 58               [ 2]  673 	sllw	x
      000315 4A               [ 1]  674 	dec	a
      000316 26 FC            [ 1]  675 	jrne	00132$
      000318                        676 00133$:
      000318 9F               [ 1]  677 	ld	a, xl
      000319 1A 02            [ 1]  678 	or	a, (0x02, sp)
      00031B 02               [ 1]  679 	rlwa	x
      00031C 1A 01            [ 1]  680 	or	a, (0x01, sp)
      00031E 95               [ 1]  681 	ld	xh, a
      00031F 1F 01            [ 2]  682 	ldw	(0x01, sp), x
                                    683 ;	user/tm1638.c: 184: for(i = 0; i < 4; i++)
      000321 0C 03            [ 1]  684 	inc	(0x03, sp)
      000323 7B 03            [ 1]  685 	ld	a, (0x03, sp)
      000325 A1 04            [ 1]  686 	cp	a, #0x04
      000327 25 E2            [ 1]  687 	jrc	00105$
                                    688 ;	user/tm1638.c: 190: for(i = 0; i < 8; i++)
      000329 0F 04            [ 1]  689 	clr	(0x04, sp)
      00032B 4F               [ 1]  690 	clr	a
      00032C                        691 00107$:
                                    692 ;	user/tm1638.c: 192: if(0x00<<i == key2) return i+1;
      00032C 88               [ 1]  693 	push	a
      00032D 5F               [ 1]  694 	clrw	x
      00032E 4D               [ 1]  695 	tnz	a
      00032F 27 04            [ 1]  696 	jreq	00136$
      000331                        697 00135$:
      000331 58               [ 2]  698 	sllw	x
      000332 4A               [ 1]  699 	dec	a
      000333 26 FC            [ 1]  700 	jrne	00135$
      000335                        701 00136$:
      000335 84               [ 1]  702 	pop	a
      000336 13 01            [ 2]  703 	cpw	x, (0x01, sp)
      000338 26 05            [ 1]  704 	jrne	00108$
      00033A 7B 04            [ 1]  705 	ld	a, (0x04, sp)
      00033C 4C               [ 1]  706 	inc	a
      00033D 20 08            [ 2]  707 	jra	00109$
      00033F                        708 00108$:
                                    709 ;	user/tm1638.c: 190: for(i = 0; i < 8; i++)
      00033F 4C               [ 1]  710 	inc	a
      000340 6B 04            [ 1]  711 	ld	(0x04, sp), a
      000342 A1 08            [ 1]  712 	cp	a, #0x08
      000344 25 E6            [ 1]  713 	jrc	00107$
                                    714 ;	user/tm1638.c: 194: return 0;
      000346 4F               [ 1]  715 	clr	a
      000347                        716 00109$:
      000347 5B 06            [ 2]  717 	addw	sp, #6
      000349 81               [ 4]  718 	ret
                                    719 	.area CODE
      00034A                        720 _NUMBER_FONT:
      00034A 3F                     721 	.db #0x3f	; 63
      00034B 06                     722 	.db #0x06	; 6
      00034C 5B                     723 	.db #0x5b	; 91
      00034D 4F                     724 	.db #0x4f	; 79	'O'
      00034E 66                     725 	.db #0x66	; 102	'f'
      00034F 6D                     726 	.db #0x6d	; 109	'm'
      000350 7D                     727 	.db #0x7d	; 125
      000351 07                     728 	.db #0x07	; 7
      000352 7F                     729 	.db #0x7f	; 127
      000353 6F                     730 	.db #0x6f	; 111	'o'
      000354 77                     731 	.db #0x77	; 119	'w'
      000355 7C                     732 	.db #0x7c	; 124
      000356 39                     733 	.db #0x39	; 57	'9'
      000357 5E                     734 	.db #0x5e	; 94
      000358 79                     735 	.db #0x79	; 121	'y'
      000359 71                     736 	.db #0x71	; 113	'q'
      00035A                        737 _ERROR_DATA:
      00035A 79                     738 	.db #0x79	; 121	'y'
      00035B 50                     739 	.db #0x50	; 80	'P'
      00035C 50                     740 	.db #0x50	; 80	'P'
      00035D 5C                     741 	.db #0x5c	; 92
      00035E 50                     742 	.db #0x50	; 80	'P'
      00035F 00                     743 	.db #0x00	; 0
      000360 00                     744 	.db #0x00	; 0
      000361 00                     745 	.db #0x00	; 0
                                    746 	.area INITIALIZER
                                    747 	.area CABS (ABS)
