                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module tm1638
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _tm_dat
                                     12 	.globl _GPIO_ReadInputPin
                                     13 	.globl _GPIO_WriteLow
                                     14 	.globl _GPIO_WriteHigh
                                     15 	.globl _GPIO_Init
                                     16 	.globl _tm1638
                                     17 	.globl _TM1638_Init
                                     18 	.globl _sendChar
                                     19 	.globl _configDisplay
                                     20 	.globl _setDisplayDigit
                                     21 	.globl _clearDisplayDigit
                                     22 	.globl _setDisplay
                                     23 	.globl _clearDisplay
                                     24 	.globl _TM1638_SendData
                                     25 	.globl _TM1638_SendIntData
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area DATA
      000000                         30 _tm1638::
      000000                         31 	.ds 7
                                     32 ;--------------------------------------------------------
                                     33 ; ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area INITIALIZED
                                     36 ;--------------------------------------------------------
                                     37 ; absolute external ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area DABS (ABS)
                                     40 ;--------------------------------------------------------
                                     41 ; global & static initialisations
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area GSINIT
                                     45 	.area GSFINAL
                                     46 	.area GSINIT
                                     47 ;--------------------------------------------------------
                                     48 ; Home
                                     49 ;--------------------------------------------------------
                                     50 	.area HOME
                                     51 	.area HOME
                                     52 ;--------------------------------------------------------
                                     53 ; code
                                     54 ;--------------------------------------------------------
                                     55 	.area CODE
                                     56 ;	user/tm1638.c: 20: void TM1638_Init(GPIO_TypeDef* displayPort, GPIO_Pin_TypeDef StbPin, GPIO_Pin_TypeDef ClkPin, GPIO_Pin_TypeDef DataPin)
                                     57 ;	-----------------------------------------
                                     58 ;	 function TM1638_Init
                                     59 ;	-----------------------------------------
      000000                         60 _TM1638_Init:
      000000 52 0A            [ 2]   61 	sub	sp, #10
                                     62 ;	user/tm1638.c: 23: tm1638.displayPort = displayPort;
      000002 AEr00r00         [ 2]   63 	ldw	x, #_tm1638+0
      000005 16 0D            [ 2]   64 	ldw	y, (0x0d, sp)
      000007 FF               [ 2]   65 	ldw	(x), y
                                     66 ;	user/tm1638.c: 24: tm1638.StbPin = StbPin;
      000008 AEr00r00         [ 2]   67 	ldw	x, #_tm1638+0
      00000B 1F 07            [ 2]   68 	ldw	(0x07, sp), x
      00000D 1E 07            [ 2]   69 	ldw	x, (0x07, sp)
      00000F 5C               [ 2]   70 	incw	x
      000010 5C               [ 2]   71 	incw	x
      000011 1F 03            [ 2]   72 	ldw	(0x03, sp), x
      000013 1E 03            [ 2]   73 	ldw	x, (0x03, sp)
      000015 7B 0F            [ 1]   74 	ld	a, (0x0f, sp)
      000017 F7               [ 1]   75 	ld	(x), a
                                     76 ;	user/tm1638.c: 25: tm1638.ClkPin = ClkPin;
      000018 1E 07            [ 2]   77 	ldw	x, (0x07, sp)
      00001A 1C 00 03         [ 2]   78 	addw	x, #0x0003
      00001D 1F 09            [ 2]   79 	ldw	(0x09, sp), x
      00001F 1E 09            [ 2]   80 	ldw	x, (0x09, sp)
      000021 7B 10            [ 1]   81 	ld	a, (0x10, sp)
      000023 F7               [ 1]   82 	ld	(x), a
                                     83 ;	user/tm1638.c: 26: tm1638.DataPin = DataPin;
      000024 1E 07            [ 2]   84 	ldw	x, (0x07, sp)
      000026 7B 11            [ 1]   85 	ld	a, (0x11, sp)
      000028 E7 04            [ 1]   86 	ld	(0x0004, x), a
                                     87 ;	user/tm1638.c: 27: tm1638.intensity = 4;
      00002A 1E 07            [ 2]   88 	ldw	x, (0x07, sp)
      00002C 1C 00 05         [ 2]   89 	addw	x, #0x0005
      00002F 1F 01            [ 2]   90 	ldw	(0x01, sp), x
      000031 1E 01            [ 2]   91 	ldw	x, (0x01, sp)
      000033 A6 04            [ 1]   92 	ld	a, #0x04
      000035 F7               [ 1]   93 	ld	(x), a
                                     94 ;	user/tm1638.c: 28: tm1638.active = TRUE;
      000036 1E 07            [ 2]   95 	ldw	x, (0x07, sp)
      000038 1C 00 06         [ 2]   96 	addw	x, #0x0006
      00003B 1F 05            [ 2]   97 	ldw	(0x05, sp), x
      00003D 1E 05            [ 2]   98 	ldw	x, (0x05, sp)
      00003F A6 01            [ 1]   99 	ld	a, #0x01
      000041 F7               [ 1]  100 	ld	(x), a
                                    101 ;	user/tm1638.c: 29: GPIO_Init(tm1638.displayPort, tm1638.StbPin | tm1638.ClkPin | tm1638.DataPin, GPIO_MODE_OUT_OD_HIZ_FAST);
      000042 7B 0F            [ 1]  102 	ld	a, (0x0f, sp)
      000044 1A 10            [ 1]  103 	or	a, (0x10, sp)
      000046 1A 11            [ 1]  104 	or	a, (0x11, sp)
      000048 1E 07            [ 2]  105 	ldw	x, (0x07, sp)
      00004A FE               [ 2]  106 	ldw	x, (x)
      00004B 4B B0            [ 1]  107 	push	#0xb0
      00004D 88               [ 1]  108 	push	a
      00004E 89               [ 2]  109 	pushw	x
      00004F CDr00r00         [ 4]  110 	call	_GPIO_Init
      000052 5B 04            [ 2]  111 	addw	sp, #4
                                    112 ;	user/tm1638.c: 30: Set(tm1638.StbPin);
      000054 1E 03            [ 2]  113 	ldw	x, (0x03, sp)
      000056 F6               [ 1]  114 	ld	a, (x)
      000057 1E 07            [ 2]  115 	ldw	x, (0x07, sp)
      000059 FE               [ 2]  116 	ldw	x, (x)
      00005A 88               [ 1]  117 	push	a
      00005B 89               [ 2]  118 	pushw	x
      00005C CDr00r00         [ 4]  119 	call	_GPIO_WriteHigh
      00005F 5B 03            [ 2]  120 	addw	sp, #3
                                    121 ;	user/tm1638.c: 31: Set(tm1638.ClkPin);
      000061 1E 09            [ 2]  122 	ldw	x, (0x09, sp)
      000063 F6               [ 1]  123 	ld	a, (x)
      000064 1E 07            [ 2]  124 	ldw	x, (0x07, sp)
      000066 FE               [ 2]  125 	ldw	x, (x)
      000067 88               [ 1]  126 	push	a
      000068 89               [ 2]  127 	pushw	x
      000069 CDr00r00         [ 4]  128 	call	_GPIO_WriteHigh
      00006C 5B 03            [ 2]  129 	addw	sp, #3
                                    130 ;	user/tm1638.c: 32: writeCmd(0x40); // send cmd write data
      00006E 4B 40            [ 1]  131 	push	#0x40
      000070 CDr01r81         [ 4]  132 	call	_writeCmd
      000073 84               [ 1]  133 	pop	a
                                    134 ;	user/tm1638.c: 33: writeCmd(0x80|tm1638.active ? 8 : 0| tm1638.intensity); //display and brightness = 4
      000074 1E 05            [ 2]  135 	ldw	x, (0x05, sp)
      000076 F6               [ 1]  136 	ld	a, (x)
      000077 AA 80            [ 1]  137 	or	a, #0x80
      000079 4D               [ 1]  138 	tnz	a
      00007A 27 04            [ 1]  139 	jreq	00106$
      00007C A6 08            [ 1]  140 	ld	a, #0x08
      00007E 20 03            [ 2]  141 	jra	00107$
      000080                        142 00106$:
      000080 1E 01            [ 2]  143 	ldw	x, (0x01, sp)
      000082 F6               [ 1]  144 	ld	a, (x)
      000083                        145 00107$:
      000083 88               [ 1]  146 	push	a
      000084 CDr01r81         [ 4]  147 	call	_writeCmd
      000087 84               [ 1]  148 	pop	a
                                    149 ;	user/tm1638.c: 34: Reset(tm1638.StbPin);
      000088 1E 03            [ 2]  150 	ldw	x, (0x03, sp)
      00008A F6               [ 1]  151 	ld	a, (x)
      00008B 1E 07            [ 2]  152 	ldw	x, (0x07, sp)
      00008D FE               [ 2]  153 	ldw	x, (x)
      00008E 88               [ 1]  154 	push	a
      00008F 89               [ 2]  155 	pushw	x
      000090 CDr00r00         [ 4]  156 	call	_GPIO_WriteLow
      000093 5B 03            [ 2]  157 	addw	sp, #3
                                    158 ;	user/tm1638.c: 35: writeByte(0xC0);
      000095 4B C0            [ 1]  159 	push	#0xc0
      000097 CDr00rB7         [ 4]  160 	call	_writeByte
      00009A 84               [ 1]  161 	pop	a
                                    162 ;	user/tm1638.c: 36: for(i = 0; i < 16; i++)
      00009B 4F               [ 1]  163 	clr	a
      00009C                        164 00102$:
                                    165 ;	user/tm1638.c: 37: writeByte(0x00);
      00009C 88               [ 1]  166 	push	a
      00009D 4B 00            [ 1]  167 	push	#0x00
      00009F CDr00rB7         [ 4]  168 	call	_writeByte
      0000A2 84               [ 1]  169 	pop	a
      0000A3 84               [ 1]  170 	pop	a
                                    171 ;	user/tm1638.c: 36: for(i = 0; i < 16; i++)
      0000A4 4C               [ 1]  172 	inc	a
      0000A5 A1 10            [ 1]  173 	cp	a, #0x10
      0000A7 25 F3            [ 1]  174 	jrc	00102$
                                    175 ;	user/tm1638.c: 38: Set(tm1638.StbPin);
      0000A9 1E 03            [ 2]  176 	ldw	x, (0x03, sp)
      0000AB F6               [ 1]  177 	ld	a, (x)
      0000AC 1E 07            [ 2]  178 	ldw	x, (0x07, sp)
      0000AE FE               [ 2]  179 	ldw	x, (x)
      0000AF 88               [ 1]  180 	push	a
      0000B0 89               [ 2]  181 	pushw	x
      0000B1 CDr00r00         [ 4]  182 	call	_GPIO_WriteHigh
      0000B4 5B 0D            [ 2]  183 	addw	sp, #13
      0000B6 81               [ 4]  184 	ret
                                    185 ;	user/tm1638.c: 41: static void writeByte(uint8_t byte)
                                    186 ;	-----------------------------------------
                                    187 ;	 function writeByte
                                    188 ;	-----------------------------------------
      0000B7                        189 _writeByte:
      0000B7 52 05            [ 2]  190 	sub	sp, #5
                                    191 ;	user/tm1638.c: 44: for(i = 0; i < 8; i++)
      0000B9 AEr00r00         [ 2]  192 	ldw	x, #_tm1638+0
      0000BC 1F 04            [ 2]  193 	ldw	(0x04, sp), x
      0000BE 1E 04            [ 2]  194 	ldw	x, (0x04, sp)
      0000C0 1C 00 03         [ 2]  195 	addw	x, #0x0003
      0000C3 1F 02            [ 2]  196 	ldw	(0x02, sp), x
      0000C5 0F 01            [ 1]  197 	clr	(0x01, sp)
      0000C7                        198 00105$:
                                    199 ;	user/tm1638.c: 46: Reset(tm1638.ClkPin); //input Data at rising edge of the clock
      0000C7 1E 02            [ 2]  200 	ldw	x, (0x02, sp)
      0000C9 F6               [ 1]  201 	ld	a, (x)
      0000CA 1E 04            [ 2]  202 	ldw	x, (0x04, sp)
      0000CC FE               [ 2]  203 	ldw	x, (x)
      0000CD 88               [ 1]  204 	push	a
      0000CE 89               [ 2]  205 	pushw	x
      0000CF CDr00r00         [ 4]  206 	call	_GPIO_WriteLow
      0000D2 5B 03            [ 2]  207 	addw	sp, #3
      0000D4 1E 04            [ 2]  208 	ldw	x, (0x04, sp)
      0000D6 FE               [ 2]  209 	ldw	x, (x)
                                    210 ;	user/tm1638.c: 47: if(byte&0x01) Set(tm1638.DataPin);
      0000D7 16 04            [ 2]  211 	ldw	y, (0x04, sp)
      0000D9 90 E6 04         [ 1]  212 	ld	a, (0x4, y)
      0000DC 88               [ 1]  213 	push	a
      0000DD 7B 09            [ 1]  214 	ld	a, (0x09, sp)
      0000DF 44               [ 1]  215 	srl	a
      0000E0 84               [ 1]  216 	pop	a
      0000E1 24 09            [ 1]  217 	jrnc	00102$
      0000E3 88               [ 1]  218 	push	a
      0000E4 89               [ 2]  219 	pushw	x
      0000E5 CDr00r00         [ 4]  220 	call	_GPIO_WriteHigh
      0000E8 5B 03            [ 2]  221 	addw	sp, #3
      0000EA 20 07            [ 2]  222 	jra	00103$
      0000EC                        223 00102$:
                                    224 ;	user/tm1638.c: 48: else Reset(tm1638.DataPin);
      0000EC 88               [ 1]  225 	push	a
      0000ED 89               [ 2]  226 	pushw	x
      0000EE CDr00r00         [ 4]  227 	call	_GPIO_WriteLow
      0000F1 5B 03            [ 2]  228 	addw	sp, #3
      0000F3                        229 00103$:
                                    230 ;	user/tm1638.c: 49: byte>>=1;
      0000F3 04 08            [ 1]  231 	srl	(0x08, sp)
                                    232 ;	user/tm1638.c: 50: Set(tm1638.ClkPin);
      0000F5 1E 02            [ 2]  233 	ldw	x, (0x02, sp)
      0000F7 F6               [ 1]  234 	ld	a, (x)
      0000F8 1E 04            [ 2]  235 	ldw	x, (0x04, sp)
      0000FA FE               [ 2]  236 	ldw	x, (x)
      0000FB 88               [ 1]  237 	push	a
      0000FC 89               [ 2]  238 	pushw	x
      0000FD CDr00r00         [ 4]  239 	call	_GPIO_WriteHigh
      000100 5B 03            [ 2]  240 	addw	sp, #3
                                    241 ;	user/tm1638.c: 44: for(i = 0; i < 8; i++)
      000102 0C 01            [ 1]  242 	inc	(0x01, sp)
      000104 7B 01            [ 1]  243 	ld	a, (0x01, sp)
      000106 A1 08            [ 1]  244 	cp	a, #0x08
      000108 25 BD            [ 1]  245 	jrc	00105$
      00010A 5B 05            [ 2]  246 	addw	sp, #5
      00010C 81               [ 4]  247 	ret
                                    248 ;	user/tm1638.c: 54: static uint8_t readByte(void)
                                    249 ;	-----------------------------------------
                                    250 ;	 function readByte
                                    251 ;	-----------------------------------------
      00010D                        252 _readByte:
      00010D 52 08            [ 2]  253 	sub	sp, #8
                                    254 ;	user/tm1638.c: 57: uint8_t temp = 0x00;
      00010F 0F 01            [ 1]  255 	clr	(0x01, sp)
                                    256 ;	user/tm1638.c: 58: GPIO_Init(tm1638.displayPort, tm1638.DataPin, GPIO_MODE_IN_PU_NO_IT);
      000111 AEr00r00         [ 2]  257 	ldw	x, #_tm1638+0
      000114 1F 07            [ 2]  258 	ldw	(0x07, sp), x
      000116 1E 07            [ 2]  259 	ldw	x, (0x07, sp)
      000118 1C 00 04         [ 2]  260 	addw	x, #0x0004
      00011B 1F 05            [ 2]  261 	ldw	(0x05, sp), x
      00011D 1E 05            [ 2]  262 	ldw	x, (0x05, sp)
      00011F F6               [ 1]  263 	ld	a, (x)
      000120 1E 07            [ 2]  264 	ldw	x, (0x07, sp)
      000122 FE               [ 2]  265 	ldw	x, (x)
      000123 4B 40            [ 1]  266 	push	#0x40
      000125 88               [ 1]  267 	push	a
      000126 89               [ 2]  268 	pushw	x
      000127 CDr00r00         [ 4]  269 	call	_GPIO_Init
      00012A 5B 04            [ 2]  270 	addw	sp, #4
                                    271 ;	user/tm1638.c: 59: Set(tm1638.DataPin);
      00012C 1E 05            [ 2]  272 	ldw	x, (0x05, sp)
      00012E F6               [ 1]  273 	ld	a, (x)
      00012F 1E 07            [ 2]  274 	ldw	x, (0x07, sp)
      000131 FE               [ 2]  275 	ldw	x, (x)
      000132 88               [ 1]  276 	push	a
      000133 89               [ 2]  277 	pushw	x
      000134 CDr00r00         [ 4]  278 	call	_GPIO_WriteHigh
      000137 5B 03            [ 2]  279 	addw	sp, #3
                                    280 ;	user/tm1638.c: 60: for(i = 0; i < 8; i++)
      000139 1E 07            [ 2]  281 	ldw	x, (0x07, sp)
      00013B 1C 00 03         [ 2]  282 	addw	x, #0x0003
      00013E 1F 03            [ 2]  283 	ldw	(0x03, sp), x
      000140 0F 02            [ 1]  284 	clr	(0x02, sp)
      000142                        285 00104$:
                                    286 ;	user/tm1638.c: 62: Set(tm1638.ClkPin); //Output Data at falling edge of the clock
      000142 1E 03            [ 2]  287 	ldw	x, (0x03, sp)
      000144 F6               [ 1]  288 	ld	a, (x)
      000145 1E 07            [ 2]  289 	ldw	x, (0x07, sp)
      000147 FE               [ 2]  290 	ldw	x, (x)
      000148 88               [ 1]  291 	push	a
      000149 89               [ 2]  292 	pushw	x
      00014A CDr00r00         [ 4]  293 	call	_GPIO_WriteHigh
      00014D 5B 03            [ 2]  294 	addw	sp, #3
                                    295 ;	user/tm1638.c: 63: temp>>=1;
      00014F 04 01            [ 1]  296 	srl	(0x01, sp)
                                    297 ;	user/tm1638.c: 64: if(Get(tm1638.DataPin)) temp |= 0x80;
      000151 1E 05            [ 2]  298 	ldw	x, (0x05, sp)
      000153 F6               [ 1]  299 	ld	a, (x)
      000154 88               [ 1]  300 	push	a
      000155 4B 0A            [ 1]  301 	push	#0x0a
      000157 4B 50            [ 1]  302 	push	#0x50
      000159 CDr00r00         [ 4]  303 	call	_GPIO_ReadInputPin
      00015C 5B 03            [ 2]  304 	addw	sp, #3
      00015E 4D               [ 1]  305 	tnz	a
      00015F 27 06            [ 1]  306 	jreq	00102$
      000161 7B 01            [ 1]  307 	ld	a, (0x01, sp)
      000163 AA 80            [ 1]  308 	or	a, #0x80
      000165 6B 01            [ 1]  309 	ld	(0x01, sp), a
      000167                        310 00102$:
                                    311 ;	user/tm1638.c: 65: Reset(tm1638.ClkPin);
      000167 1E 03            [ 2]  312 	ldw	x, (0x03, sp)
      000169 F6               [ 1]  313 	ld	a, (x)
      00016A 1E 07            [ 2]  314 	ldw	x, (0x07, sp)
      00016C FE               [ 2]  315 	ldw	x, (x)
      00016D 88               [ 1]  316 	push	a
      00016E 89               [ 2]  317 	pushw	x
      00016F CDr00r00         [ 4]  318 	call	_GPIO_WriteLow
      000172 5B 03            [ 2]  319 	addw	sp, #3
                                    320 ;	user/tm1638.c: 60: for(i = 0; i < 8; i++)
      000174 0C 02            [ 1]  321 	inc	(0x02, sp)
      000176 7B 02            [ 1]  322 	ld	a, (0x02, sp)
      000178 A1 08            [ 1]  323 	cp	a, #0x08
      00017A 25 C6            [ 1]  324 	jrc	00104$
                                    325 ;	user/tm1638.c: 67: return temp;
      00017C 7B 01            [ 1]  326 	ld	a, (0x01, sp)
      00017E 5B 08            [ 2]  327 	addw	sp, #8
      000180 81               [ 4]  328 	ret
                                    329 ;	user/tm1638.c: 70: static void writeCmd(uint8_t cmd)
                                    330 ;	-----------------------------------------
                                    331 ;	 function writeCmd
                                    332 ;	-----------------------------------------
      000181                        333 _writeCmd:
      000181 89               [ 2]  334 	pushw	x
                                    335 ;	user/tm1638.c: 72: Set(tm1638.StbPin); 
      000182 AEr00r00         [ 2]  336 	ldw	x, #_tm1638+0
      000185 1F 01            [ 2]  337 	ldw	(0x01, sp), x
      000187 1E 01            [ 2]  338 	ldw	x, (0x01, sp)
      000189 5C               [ 2]  339 	incw	x
      00018A 5C               [ 2]  340 	incw	x
      00018B F6               [ 1]  341 	ld	a, (x)
      00018C 16 01            [ 2]  342 	ldw	y, (0x01, sp)
      00018E 90 FE            [ 2]  343 	ldw	y, (y)
      000190 89               [ 2]  344 	pushw	x
      000191 88               [ 1]  345 	push	a
      000192 90 89            [ 2]  346 	pushw	y
      000194 CDr00r00         [ 4]  347 	call	_GPIO_WriteHigh
      000197 5B 03            [ 2]  348 	addw	sp, #3
      000199 85               [ 2]  349 	popw	x
                                    350 ;	user/tm1638.c: 73: Reset(tm1638.StbPin); // falling edge STB is an instruction
      00019A F6               [ 1]  351 	ld	a, (x)
      00019B 1E 01            [ 2]  352 	ldw	x, (0x01, sp)
      00019D FE               [ 2]  353 	ldw	x, (x)
      00019E 88               [ 1]  354 	push	a
      00019F 89               [ 2]  355 	pushw	x
      0001A0 CDr00r00         [ 4]  356 	call	_GPIO_WriteLow
      0001A3 5B 03            [ 2]  357 	addw	sp, #3
                                    358 ;	user/tm1638.c: 74: writeByte(cmd); // Send command
      0001A5 7B 05            [ 1]  359 	ld	a, (0x05, sp)
      0001A7 88               [ 1]  360 	push	a
      0001A8 CDr00rB7         [ 4]  361 	call	_writeByte
      0001AB 84               [ 1]  362 	pop	a
      0001AC 85               [ 2]  363 	popw	x
      0001AD 81               [ 4]  364 	ret
                                    365 ;	user/tm1638.c: 78: static void writeData(uint8_t addr, uint8_t data)
                                    366 ;	-----------------------------------------
                                    367 ;	 function writeData
                                    368 ;	-----------------------------------------
      0001AE                        369 _writeData:
                                    370 ;	user/tm1638.c: 80: writeCmd(0x44); //Setting Data (B7B6: 01): Normal Mode, Fixed addr, Write data
      0001AE 4B 44            [ 1]  371 	push	#0x44
      0001B0 CDr01r81         [ 4]  372 	call	_writeCmd
      0001B3 84               [ 1]  373 	pop	a
                                    374 ;	user/tm1638.c: 81: writeCmd(0xC0|addr); //Setting Address (B7B6: 11): Display addr: 00H-0FH
      0001B4 7B 03            [ 1]  375 	ld	a, (0x03, sp)
      0001B6 AA C0            [ 1]  376 	or	a, #0xc0
      0001B8 88               [ 1]  377 	push	a
      0001B9 CDr01r81         [ 4]  378 	call	_writeCmd
      0001BC 84               [ 1]  379 	pop	a
                                    380 ;	user/tm1638.c: 82: writeByte(data); // Send Data
      0001BD 7B 04            [ 1]  381 	ld	a, (0x04, sp)
      0001BF 88               [ 1]  382 	push	a
      0001C0 CDr00rB7         [ 4]  383 	call	_writeByte
      0001C3 84               [ 1]  384 	pop	a
      0001C4 81               [ 4]  385 	ret
                                    386 ;	user/tm1638.c: 86: void sendChar(uint8_t pos, uint8_t data, bool dot)
                                    387 ;	-----------------------------------------
                                    388 ;	 function sendChar
                                    389 ;	-----------------------------------------
      0001C5                        390 _sendChar:
                                    391 ;	user/tm1638.c: 88: writeData(pos << 1, data | dot ? 0x80: 0x00);
      0001C5 7B 04            [ 1]  392 	ld	a, (0x04, sp)
      0001C7 1A 05            [ 1]  393 	or	a, (0x05, sp)
      0001C9 4D               [ 1]  394 	tnz	a
      0001CA 27 03            [ 1]  395 	jreq	00103$
      0001CC A6 80            [ 1]  396 	ld	a, #0x80
      0001CE 21                     397 	.byte 0x21
      0001CF                        398 00103$:
      0001CF 4F               [ 1]  399 	clr	a
      0001D0                        400 00104$:
      0001D0 41               [ 1]  401 	exg	a, xl
      0001D1 7B 03            [ 1]  402 	ld	a, (0x03, sp)
      0001D3 41               [ 1]  403 	exg	a, xl
      0001D4 58               [ 2]  404 	sllw	x
      0001D5 88               [ 1]  405 	push	a
      0001D6 9F               [ 1]  406 	ld	a, xl
      0001D7 88               [ 1]  407 	push	a
      0001D8 CDr01rAE         [ 4]  408 	call	_writeData
      0001DB 85               [ 2]  409 	popw	x
      0001DC 81               [ 4]  410 	ret
                                    411 ;	user/tm1638.c: 91: void configDisplay(bool active, uint8_t intensity)
                                    412 ;	-----------------------------------------
                                    413 ;	 function configDisplay
                                    414 ;	-----------------------------------------
      0001DD                        415 _configDisplay:
      0001DD 52 04            [ 2]  416 	sub	sp, #4
                                    417 ;	user/tm1638.c: 93: tm1638.intensity = intensity;
      0001DF AEr00r00         [ 2]  418 	ldw	x, #_tm1638+0
      0001E2 1F 01            [ 2]  419 	ldw	(0x01, sp), x
      0001E4 1E 01            [ 2]  420 	ldw	x, (0x01, sp)
      0001E6 1C 00 05         [ 2]  421 	addw	x, #0x0005
      0001E9 7B 08            [ 1]  422 	ld	a, (0x08, sp)
      0001EB F7               [ 1]  423 	ld	(x), a
                                    424 ;	user/tm1638.c: 94: tm1638.active = active;
      0001EC 16 01            [ 2]  425 	ldw	y, (0x01, sp)
      0001EE 72 A9 00 06      [ 2]  426 	addw	y, #0x0006
      0001F2 7B 07            [ 1]  427 	ld	a, (0x07, sp)
      0001F4 90 F7            [ 1]  428 	ld	(y), a
                                    429 ;	user/tm1638.c: 95: writeCmd(0x80|tm1638.active ? 8 : 0 | tm1638.intensity); //Display control (B7B6: 10): B3: 1: enable, 0: disable; B2B1B0: 0-7: brighness
      0001F6 7B 07            [ 1]  430 	ld	a, (0x07, sp)
      0001F8 AA 80            [ 1]  431 	or	a, #0x80
      0001FA 4D               [ 1]  432 	tnz	a
      0001FB 27 04            [ 1]  433 	jreq	00103$
      0001FD A6 08            [ 1]  434 	ld	a, #0x08
      0001FF 20 01            [ 2]  435 	jra	00104$
      000201                        436 00103$:
      000201 F6               [ 1]  437 	ld	a, (x)
      000202                        438 00104$:
      000202 88               [ 1]  439 	push	a
      000203 CDr01r81         [ 4]  440 	call	_writeCmd
      000206 84               [ 1]  441 	pop	a
                                    442 ;	user/tm1638.c: 96: Reset(tm1638.StbPin);
      000207 1E 01            [ 2]  443 	ldw	x, (0x01, sp)
      000209 5C               [ 2]  444 	incw	x
      00020A 5C               [ 2]  445 	incw	x
      00020B 1F 03            [ 2]  446 	ldw	(0x03, sp), x
      00020D 1E 03            [ 2]  447 	ldw	x, (0x03, sp)
      00020F F6               [ 1]  448 	ld	a, (x)
      000210 1E 01            [ 2]  449 	ldw	x, (0x01, sp)
      000212 FE               [ 2]  450 	ldw	x, (x)
      000213 88               [ 1]  451 	push	a
      000214 89               [ 2]  452 	pushw	x
      000215 CDr00r00         [ 4]  453 	call	_GPIO_WriteLow
      000218 5B 03            [ 2]  454 	addw	sp, #3
                                    455 ;	user/tm1638.c: 97: Reset(tm1638.ClkPin);
      00021A 1E 01            [ 2]  456 	ldw	x, (0x01, sp)
      00021C 1C 00 03         [ 2]  457 	addw	x, #0x0003
      00021F F6               [ 1]  458 	ld	a, (x)
      000220 16 01            [ 2]  459 	ldw	y, (0x01, sp)
      000222 90 FE            [ 2]  460 	ldw	y, (y)
      000224 89               [ 2]  461 	pushw	x
      000225 88               [ 1]  462 	push	a
      000226 90 89            [ 2]  463 	pushw	y
      000228 CDr00r00         [ 4]  464 	call	_GPIO_WriteLow
      00022B 5B 03            [ 2]  465 	addw	sp, #3
      00022D 85               [ 2]  466 	popw	x
                                    467 ;	user/tm1638.c: 98: Set(tm1638.ClkPin);
      00022E F6               [ 1]  468 	ld	a, (x)
      00022F 1E 01            [ 2]  469 	ldw	x, (0x01, sp)
      000231 FE               [ 2]  470 	ldw	x, (x)
      000232 88               [ 1]  471 	push	a
      000233 89               [ 2]  472 	pushw	x
      000234 CDr00r00         [ 4]  473 	call	_GPIO_WriteHigh
      000237 5B 03            [ 2]  474 	addw	sp, #3
                                    475 ;	user/tm1638.c: 99: Set(tm1638.StbPin);
      000239 1E 03            [ 2]  476 	ldw	x, (0x03, sp)
      00023B F6               [ 1]  477 	ld	a, (x)
      00023C 1E 01            [ 2]  478 	ldw	x, (0x01, sp)
      00023E FE               [ 2]  479 	ldw	x, (x)
      00023F 88               [ 1]  480 	push	a
      000240 89               [ 2]  481 	pushw	x
      000241 CDr00r00         [ 4]  482 	call	_GPIO_WriteHigh
      000244 5B 07            [ 2]  483 	addw	sp, #7
      000246 81               [ 4]  484 	ret
                                    485 ;	user/tm1638.c: 102: void setDisplayDigit(uint8_t digit, uint8_t pos, bool dot, const uint8_t numberFont[])
                                    486 ;	-----------------------------------------
                                    487 ;	 function setDisplayDigit
                                    488 ;	-----------------------------------------
      000247                        489 _setDisplayDigit:
                                    490 ;	user/tm1638.c: 104: sendChar(pos, numberFont[digit & 0xF], dot);
      000247 7B 03            [ 1]  491 	ld	a, (0x03, sp)
      000249 A4 0F            [ 1]  492 	and	a, #0x0f
      00024B 5F               [ 1]  493 	clrw	x
      00024C 97               [ 1]  494 	ld	xl, a
      00024D 72 FB 06         [ 2]  495 	addw	x, (0x06, sp)
      000250 F6               [ 1]  496 	ld	a, (x)
      000251 97               [ 1]  497 	ld	xl, a
      000252 7B 05            [ 1]  498 	ld	a, (0x05, sp)
      000254 88               [ 1]  499 	push	a
      000255 9F               [ 1]  500 	ld	a, xl
      000256 88               [ 1]  501 	push	a
      000257 7B 06            [ 1]  502 	ld	a, (0x06, sp)
      000259 88               [ 1]  503 	push	a
      00025A CDr01rC5         [ 4]  504 	call	_sendChar
      00025D 5B 03            [ 2]  505 	addw	sp, #3
      00025F 81               [ 4]  506 	ret
                                    507 ;	user/tm1638.c: 107: void clearDisplayDigit(uint8_t pos, bool dot)
                                    508 ;	-----------------------------------------
                                    509 ;	 function clearDisplayDigit
                                    510 ;	-----------------------------------------
      000260                        511 _clearDisplayDigit:
                                    512 ;	user/tm1638.c: 109: sendChar(pos, 0, dot);
      000260 7B 04            [ 1]  513 	ld	a, (0x04, sp)
      000262 88               [ 1]  514 	push	a
      000263 4B 00            [ 1]  515 	push	#0x00
      000265 7B 05            [ 1]  516 	ld	a, (0x05, sp)
      000267 88               [ 1]  517 	push	a
      000268 CDr01rC5         [ 4]  518 	call	_sendChar
      00026B 5B 03            [ 2]  519 	addw	sp, #3
      00026D 81               [ 4]  520 	ret
                                    521 ;	user/tm1638.c: 112: void setDisplay(const uint8_t values[], uint8_t size)
                                    522 ;	-----------------------------------------
                                    523 ;	 function setDisplay
                                    524 ;	-----------------------------------------
      00026E                        525 _setDisplay:
                                    526 ;	user/tm1638.c: 115: for(i = 0; i<size; i++) 
      00026E 4F               [ 1]  527 	clr	a
      00026F                        528 00103$:
      00026F 11 05            [ 1]  529 	cp	a, (0x05, sp)
      000271 25 01            [ 1]  530 	jrc	00116$
      000273 81               [ 4]  531 	ret
      000274                        532 00116$:
                                    533 ;	user/tm1638.c: 116: sendChar(i, values[i], 0);
      000274 5F               [ 1]  534 	clrw	x
      000275 97               [ 1]  535 	ld	xl, a
      000276 72 FB 03         [ 2]  536 	addw	x, (0x03, sp)
      000279 88               [ 1]  537 	push	a
      00027A F6               [ 1]  538 	ld	a, (x)
      00027B 97               [ 1]  539 	ld	xl, a
      00027C 84               [ 1]  540 	pop	a
      00027D 88               [ 1]  541 	push	a
      00027E 4B 00            [ 1]  542 	push	#0x00
      000280 89               [ 2]  543 	pushw	x
      000281 5B 01            [ 2]  544 	addw	sp, #1
      000283 88               [ 1]  545 	push	a
      000284 CDr01rC5         [ 4]  546 	call	_sendChar
      000287 5B 03            [ 2]  547 	addw	sp, #3
      000289 84               [ 1]  548 	pop	a
                                    549 ;	user/tm1638.c: 115: for(i = 0; i<size; i++) 
      00028A 4C               [ 1]  550 	inc	a
      00028B 20 E2            [ 2]  551 	jra	00103$
      00028D 81               [ 4]  552 	ret
                                    553 ;	user/tm1638.c: 119: void clearDisplay(void)
                                    554 ;	-----------------------------------------
                                    555 ;	 function clearDisplay
                                    556 ;	-----------------------------------------
      00028E                        557 _clearDisplay:
                                    558 ;	user/tm1638.c: 122: for(i = 0; i < 8; i++)
      00028E 4F               [ 1]  559 	clr	a
      00028F                        560 00102$:
                                    561 ;	user/tm1638.c: 123: writeData(i << 1, 0);
      00028F 97               [ 1]  562 	ld	xl, a
      000290 58               [ 2]  563 	sllw	x
      000291 88               [ 1]  564 	push	a
      000292 4B 00            [ 1]  565 	push	#0x00
      000294 89               [ 2]  566 	pushw	x
      000295 5B 01            [ 2]  567 	addw	sp, #1
      000297 CDr01rAE         [ 4]  568 	call	_writeData
      00029A 85               [ 2]  569 	popw	x
      00029B 84               [ 1]  570 	pop	a
                                    571 ;	user/tm1638.c: 122: for(i = 0; i < 8; i++)
      00029C 4C               [ 1]  572 	inc	a
      00029D A1 08            [ 1]  573 	cp	a, #0x08
      00029F 25 EE            [ 1]  574 	jrc	00102$
      0002A1 81               [ 4]  575 	ret
                                    576 ;	user/tm1638.c: 147: void TM1638_SendData(uint8_t i, char *str)
                                    577 ;	-----------------------------------------
                                    578 ;	 function TM1638_SendData
                                    579 ;	-----------------------------------------
      0002A2                        580 _TM1638_SendData:
      0002A2 52 10            [ 2]  581 	sub	sp, #16
      0002A4 AEr03r57         [ 2]  582 	ldw	x, #_tm_dat+0
      0002A7 1F 0C            [ 2]  583 	ldw	(0x0c, sp), x
      0002A9 AEr03r73         [ 2]  584 	ldw	x, #_tm_dat+28
      0002AC 1F 0F            [ 2]  585 	ldw	(0x0f, sp), x
      0002AE 7B 13            [ 1]  586 	ld	a, (0x13, sp)
      0002B0 6B 0E            [ 1]  587 	ld	(0x0e, sp), a
      0002B2                        588 00115$:
                                    589 ;	user/tm1638.c: 151: for(; i<8; i++)
      0002B2 7B 0E            [ 1]  590 	ld	a, (0x0e, sp)
      0002B4 A1 08            [ 1]  591 	cp	a, #0x08
      0002B6 25 03            [ 1]  592 	jrc	00148$
      0002B8 CCr03r41         [ 2]  593 	jp	00117$
      0002BB                        594 00148$:
                                    595 ;	user/tm1638.c: 153: k = 0;
      0002BB 0F 02            [ 1]  596 	clr	(0x02, sp)
                                    597 ;	user/tm1638.c: 154: for(j = 0; j < 14; j++)
      0002BD 16 14            [ 2]  598 	ldw	y, (0x14, sp)
      0002BF 17 0A            [ 2]  599 	ldw	(0x0a, sp), y
      0002C1 0F 03            [ 1]  600 	clr	(0x03, sp)
      0002C3                        601 00112$:
                                    602 ;	user/tm1638.c: 156: if(*str == tm_dat[0][j])
      0002C3 1E 0A            [ 2]  603 	ldw	x, (0x0a, sp)
      0002C5 F6               [ 1]  604 	ld	a, (x)
      0002C6 90 97            [ 1]  605 	ld	yl, a
      0002C8 7B 03            [ 1]  606 	ld	a, (0x03, sp)
      0002CA 48               [ 1]  607 	sll	a
      0002CB 6B 09            [ 1]  608 	ld	(0x09, sp), a
      0002CD 5F               [ 1]  609 	clrw	x
      0002CE 7B 09            [ 1]  610 	ld	a, (0x09, sp)
      0002D0 97               [ 1]  611 	ld	xl, a
      0002D1 72 FB 0C         [ 2]  612 	addw	x, (0x0c, sp)
      0002D4 FE               [ 2]  613 	ldw	x, (x)
      0002D5 1F 07            [ 2]  614 	ldw	(0x07, sp), x
      0002D7 4F               [ 1]  615 	clr	a
      0002D8 90 95            [ 1]  616 	ld	yh, a
      0002DA 93               [ 1]  617 	ldw	x, y
      0002DB 13 07            [ 2]  618 	cpw	x, (0x07, sp)
      0002DD 26 11            [ 1]  619 	jrne	00113$
                                    620 ;	user/tm1638.c: 158: chr = tm_dat[1][j];
      0002DF 5F               [ 1]  621 	clrw	x
      0002E0 7B 09            [ 1]  622 	ld	a, (0x09, sp)
      0002E2 97               [ 1]  623 	ld	xl, a
      0002E3 72 FB 0F         [ 2]  624 	addw	x, (0x0f, sp)
      0002E6 FE               [ 2]  625 	ldw	x, (x)
      0002E7 9F               [ 1]  626 	ld	a, xl
      0002E8 6B 01            [ 1]  627 	ld	(0x01, sp), a
                                    628 ;	user/tm1638.c: 159: k = 1;
      0002EA A6 01            [ 1]  629 	ld	a, #0x01
      0002EC 6B 02            [ 1]  630 	ld	(0x02, sp), a
                                    631 ;	user/tm1638.c: 160: break;
      0002EE 20 08            [ 2]  632 	jra	00103$
      0002F0                        633 00113$:
                                    634 ;	user/tm1638.c: 154: for(j = 0; j < 14; j++)
      0002F0 0C 03            [ 1]  635 	inc	(0x03, sp)
      0002F2 7B 03            [ 1]  636 	ld	a, (0x03, sp)
      0002F4 A1 0E            [ 1]  637 	cp	a, #0x0e
      0002F6 25 CB            [ 1]  638 	jrc	00112$
      0002F8                        639 00103$:
                                    640 ;	user/tm1638.c: 163: if(k == 0)
      0002F8 0D 02            [ 1]  641 	tnz	(0x02, sp)
      0002FA 26 02            [ 1]  642 	jrne	00105$
                                    643 ;	user/tm1638.c: 165: chr = 0x00;
      0002FC 0F 01            [ 1]  644 	clr	(0x01, sp)
      0002FE                        645 00105$:
                                    646 ;	user/tm1638.c: 167: if(*(str+1)=='.'){
      0002FE 1E 14            [ 2]  647 	ldw	x, (0x14, sp)
      000300 5C               [ 2]  648 	incw	x
      000301 1F 05            [ 2]  649 	ldw	(0x05, sp), x
      000303 1E 05            [ 2]  650 	ldw	x, (0x05, sp)
      000305 F6               [ 1]  651 	ld	a, (x)
      000306 97               [ 1]  652 	ld	xl, a
                                    653 ;	user/tm1638.c: 169: writeData(i*2,chr);
      000307 7B 0E            [ 1]  654 	ld	a, (0x0e, sp)
      000309 48               [ 1]  655 	sll	a
      00030A 6B 04            [ 1]  656 	ld	(0x04, sp), a
                                    657 ;	user/tm1638.c: 167: if(*(str+1)=='.'){
      00030C 9F               [ 1]  658 	ld	a, xl
      00030D A1 2E            [ 1]  659 	cp	a, #0x2e
      00030F 26 16            [ 1]  660 	jrne	00107$
                                    661 ;	user/tm1638.c: 168: chr|=0x80;
      000311 7B 01            [ 1]  662 	ld	a, (0x01, sp)
      000313 AA 80            [ 1]  663 	or	a, #0x80
      000315 6B 01            [ 1]  664 	ld	(0x01, sp), a
                                    665 ;	user/tm1638.c: 169: writeData(i*2,chr);
      000317 7B 01            [ 1]  666 	ld	a, (0x01, sp)
      000319 88               [ 1]  667 	push	a
      00031A 7B 05            [ 1]  668 	ld	a, (0x05, sp)
      00031C 88               [ 1]  669 	push	a
      00031D CDr01rAE         [ 4]  670 	call	_writeData
      000320 85               [ 2]  671 	popw	x
                                    672 ;	user/tm1638.c: 170: str++;
      000321 16 05            [ 2]  673 	ldw	y, (0x05, sp)
      000323 17 14            [ 2]  674 	ldw	(0x14, sp), y
      000325 20 0A            [ 2]  675 	jra	00108$
      000327                        676 00107$:
                                    677 ;	user/tm1638.c: 172: writeData(i*2,chr);
      000327 7B 01            [ 1]  678 	ld	a, (0x01, sp)
      000329 88               [ 1]  679 	push	a
      00032A 7B 05            [ 1]  680 	ld	a, (0x05, sp)
      00032C 88               [ 1]  681 	push	a
      00032D CDr01rAE         [ 4]  682 	call	_writeData
      000330 85               [ 2]  683 	popw	x
      000331                        684 00108$:
                                    685 ;	user/tm1638.c: 174: str++;
      000331 1E 14            [ 2]  686 	ldw	x, (0x14, sp)
      000333 5C               [ 2]  687 	incw	x
      000334 1F 14            [ 2]  688 	ldw	(0x14, sp), x
                                    689 ;	user/tm1638.c: 175: if(*str=='\0')break;
      000336 1E 14            [ 2]  690 	ldw	x, (0x14, sp)
      000338 F6               [ 1]  691 	ld	a, (x)
      000339 4D               [ 1]  692 	tnz	a
      00033A 27 05            [ 1]  693 	jreq	00117$
                                    694 ;	user/tm1638.c: 151: for(; i<8; i++)
      00033C 0C 0E            [ 1]  695 	inc	(0x0e, sp)
      00033E CCr02rB2         [ 2]  696 	jp	00115$
      000341                        697 00117$:
      000341 5B 10            [ 2]  698 	addw	sp, #16
      000343 81               [ 4]  699 	ret
                                    700 ;	user/tm1638.c: 179: void TM1638_SendIntData(uint8_t i, int num)
                                    701 ;	-----------------------------------------
                                    702 ;	 function TM1638_SendIntData
                                    703 ;	-----------------------------------------
      000344                        704 _TM1638_SendIntData:
      000344 88               [ 1]  705 	push	a
                                    706 ;	user/tm1638.c: 182: a = num + '0';
      000345 7B 06            [ 1]  707 	ld	a, (0x06, sp)
      000347 AB 30            [ 1]  708 	add	a, #0x30
      000349 6B 01            [ 1]  709 	ld	(0x01, sp), a
                                    710 ;	user/tm1638.c: 183: TM1638_SendData(i,&a);
      00034B 96               [ 1]  711 	ldw	x, sp
      00034C 5C               [ 2]  712 	incw	x
      00034D 89               [ 2]  713 	pushw	x
      00034E 7B 06            [ 1]  714 	ld	a, (0x06, sp)
      000350 88               [ 1]  715 	push	a
      000351 CDr02rA2         [ 4]  716 	call	_TM1638_SendData
      000354 5B 04            [ 2]  717 	addw	sp, #4
      000356 81               [ 4]  718 	ret
                                    719 	.area CODE
      000357                        720 _tm_dat:
      000357 00 30                  721 	.dw #0x0030
      000359 00 31                  722 	.dw #0x0031
      00035B 00 32                  723 	.dw #0x0032
      00035D 00 33                  724 	.dw #0x0033
      00035F 00 34                  725 	.dw #0x0034
      000361 00 35                  726 	.dw #0x0035
      000363 00 36                  727 	.dw #0x0036
      000365 00 37                  728 	.dw #0x0037
      000367 00 38                  729 	.dw #0x0038
      000369 00 39                  730 	.dw #0x0039
      00036B 00 2E                  731 	.dw #0x002e
      00036D 00 2D                  732 	.dw #0x002d
      00036F 00 5F                  733 	.dw #0x005f
      000371 00 20                  734 	.dw #0x0020
      000373 00 3F                  735 	.dw #0x003f
      000375 00 06                  736 	.dw #0x0006
      000377 00 5B                  737 	.dw #0x005b
      000379 00 4F                  738 	.dw #0x004f
      00037B 00 66                  739 	.dw #0x0066
      00037D 00 6D                  740 	.dw #0x006d
      00037F 00 7D                  741 	.dw #0x007d
      000381 00 07                  742 	.dw #0x0007
      000383 00 7F                  743 	.dw #0x007f
      000385 00 6F                  744 	.dw #0x006f
      000387 00 80                  745 	.dw #0x0080
      000389 00 40                  746 	.dw #0x0040
      00038B 00 08                  747 	.dw #0x0008
      00038D 00 00                  748 	.dw #0x0000
                                    749 	.area INITIALIZER
                                    750 	.area CABS (ABS)
