                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _delay
                                     13 	.globl _TIM4_UPD_OVF_IRQHandler
                                     14 	.globl _clock_setup
                                     15 	.globl _setLed
                                     16 	.globl _getKey
                                     17 	.globl _displayNumber
                                     18 	.globl _configDisplay
                                     19 	.globl _TM1638_Init
                                     20 	.globl _TIMER_CheckTimeMS
                                     21 	.globl _TIMER_InitTime
                                     22 	.globl _TIMER_Inc
                                     23 	.globl _TIMER_Init
                                     24 	.globl _TIM4_ClearITPendingBit
                                     25 	.globl _CLK_GetFlagStatus
                                     26 	.globl _CLK_SYSCLKConfig
                                     27 	.globl _CLK_HSIPrescalerConfig
                                     28 	.globl _CLK_ClockSwitchConfig
                                     29 	.globl _CLK_PeripheralClockConfig
                                     30 	.globl _CLK_ClockSwitchCmd
                                     31 	.globl _CLK_LSICmd
                                     32 	.globl _CLK_HSICmd
                                     33 	.globl _CLK_HSECmd
                                     34 	.globl _CLK_DeInit
                                     35 	.globl _tick
                                     36 ;--------------------------------------------------------
                                     37 ; ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area DATA
      000000                         40 _tick::
      000000                         41 	.ds 6
                                     42 ;--------------------------------------------------------
                                     43 ; ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area INITIALIZED
                                     46 ;--------------------------------------------------------
                                     47 ; Stack segment in internal ram 
                                     48 ;--------------------------------------------------------
                                     49 	.area	SSEG
      000000                         50 __start__stack:
      000000                         51 	.ds	1
                                     52 
                                     53 ;--------------------------------------------------------
                                     54 ; absolute external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area DABS (ABS)
                                     57 ;--------------------------------------------------------
                                     58 ; interrupt vector 
                                     59 ;--------------------------------------------------------
                                     60 	.area HOME
      000000                         61 __interrupt_vect:
      000000 82v00u00u00             62 	int s_GSINIT ;reset
      000004 82 00 00 00             63 	int 0x0000 ;trap
      000008 82 00 00 00             64 	int 0x0000 ;int0
      00000C 82 00 00 00             65 	int 0x0000 ;int1
      000010 82 00 00 00             66 	int 0x0000 ;int2
      000014 82 00 00 00             67 	int 0x0000 ;int3
      000018 82 00 00 00             68 	int 0x0000 ;int4
      00001C 82 00 00 00             69 	int 0x0000 ;int5
      000020 82 00 00 00             70 	int 0x0000 ;int6
      000024 82 00 00 00             71 	int 0x0000 ;int7
      000028 82 00 00 00             72 	int 0x0000 ;int8
      00002C 82 00 00 00             73 	int 0x0000 ;int9
      000030 82 00 00 00             74 	int 0x0000 ;int10
      000034 82 00 00 00             75 	int 0x0000 ;int11
      000038 82 00 00 00             76 	int 0x0000 ;int12
      00003C 82 00 00 00             77 	int 0x0000 ;int13
      000040 82 00 00 00             78 	int 0x0000 ;int14
      000044 82 00 00 00             79 	int 0x0000 ;int15
      000048 82 00 00 00             80 	int 0x0000 ;int16
      00004C 82 00 00 00             81 	int 0x0000 ;int17
      000050 82 00 00 00             82 	int 0x0000 ;int18
      000054 82 00 00 00             83 	int 0x0000 ;int19
      000058 82 00 00 00             84 	int 0x0000 ;int20
      00005C 82 00 00 00             85 	int 0x0000 ;int21
      000060 82 00 00 00             86 	int 0x0000 ;int22
      000064 82v00u00u80             87 	int _TIM4_UPD_OVF_IRQHandler ;int23
      000068 82 00 00 00             88 	int 0x0000 ;int24
      00006C 82 00 00 00             89 	int 0x0000 ;int25
      000070 82 00 00 00             90 	int 0x0000 ;int26
      000074 82 00 00 00             91 	int 0x0000 ;int27
      000078 82 00 00 00             92 	int 0x0000 ;int28
      00007C 82 00 00 00             93 	int 0x0000 ;int29
                                     94 ;--------------------------------------------------------
                                     95 ; global & static initialisations
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME
                                     98 	.area GSINIT
                                     99 	.area GSFINAL
                                    100 	.area GSINIT
      000000                        101 __sdcc_gs_init_startup:
      000000                        102 __sdcc_init_data:
                                    103 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  104 	ldw x, #l_DATA
      000003 27 07            [ 1]  105 	jreq	00002$
      000005                        106 00001$:
      000005 72 4FuFFuFF      [ 1]  107 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  108 	decw x
      00000A 26 F9            [ 1]  109 	jrne	00001$
      00000C                        110 00002$:
      00000C AEr00r00         [ 2]  111 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  112 	jreq	00004$
      000011                        113 00003$:
      000011 D6uFFuFF         [ 1]  114 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  115 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  116 	decw	x
      000018 26 F7            [ 1]  117 	jrne	00003$
      00001A                        118 00004$:
                                    119 ; stm8_genXINIT() end
                                    120 	.area GSFINAL
      000000 CCr00r80         [ 2]  121 	jp	__sdcc_program_startup
                                    122 ;--------------------------------------------------------
                                    123 ; Home
                                    124 ;--------------------------------------------------------
                                    125 	.area HOME
                                    126 	.area HOME
      000080                        127 __sdcc_program_startup:
      000080 CCr00r97         [ 2]  128 	jp	_main
                                    129 ;	return from main will return to caller
                                    130 ;--------------------------------------------------------
                                    131 ; code
                                    132 ;--------------------------------------------------------
                                    133 	.area CODE
                                    134 ;	user/main.c: 24: void clock_setup(void)
                                    135 ;	-----------------------------------------
                                    136 ;	 function clock_setup
                                    137 ;	-----------------------------------------
      000000                        138 _clock_setup:
                                    139 ;	user/main.c: 26: CLK_DeInit();
      000000 CDr00r00         [ 4]  140 	call	_CLK_DeInit
                                    141 ;	user/main.c: 27: CLK_HSECmd(DISABLE);
      000003 4B 00            [ 1]  142 	push	#0x00
      000005 CDr00r00         [ 4]  143 	call	_CLK_HSECmd
      000008 84               [ 1]  144 	pop	a
                                    145 ;	user/main.c: 28: CLK_LSICmd(DISABLE);
      000009 4B 00            [ 1]  146 	push	#0x00
      00000B CDr00r00         [ 4]  147 	call	_CLK_LSICmd
      00000E 84               [ 1]  148 	pop	a
                                    149 ;	user/main.c: 29: CLK_HSICmd(ENABLE);
      00000F 4B 01            [ 1]  150 	push	#0x01
      000011 CDr00r00         [ 4]  151 	call	_CLK_HSICmd
      000014 84               [ 1]  152 	pop	a
                                    153 ;	user/main.c: 30: while(CLK_GetFlagStatus(CLK_FLAG_HSIRDY) == FALSE);
      000015                        154 00101$:
      000015 4B 02            [ 1]  155 	push	#0x02
      000017 4B 01            [ 1]  156 	push	#0x01
      000019 CDr00r00         [ 4]  157 	call	_CLK_GetFlagStatus
      00001C 85               [ 2]  158 	popw	x
      00001D 4D               [ 1]  159 	tnz	a
      00001E 27 F5            [ 1]  160 	jreq	00101$
                                    161 ;	user/main.c: 31: CLK_ClockSwitchCmd(ENABLE);
      000020 4B 01            [ 1]  162 	push	#0x01
      000022 CDr00r00         [ 4]  163 	call	_CLK_ClockSwitchCmd
      000025 84               [ 1]  164 	pop	a
                                    165 ;	user/main.c: 32: CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
      000026 4B 00            [ 1]  166 	push	#0x00
      000028 CDr00r00         [ 4]  167 	call	_CLK_HSIPrescalerConfig
      00002B 84               [ 1]  168 	pop	a
                                    169 ;	user/main.c: 33: CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV2);
      00002C 4B 81            [ 1]  170 	push	#0x81
      00002E CDr00r00         [ 4]  171 	call	_CLK_SYSCLKConfig
      000031 84               [ 1]  172 	pop	a
                                    173 ;	user/main.c: 34: CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO, CLK_SOURCE_HSI, DISABLE, CLK_CURRENTCLOCKSTATE_ENABLE);
      000032 4B 01            [ 1]  174 	push	#0x01
      000034 4B 00            [ 1]  175 	push	#0x00
      000036 4B E1            [ 1]  176 	push	#0xe1
      000038 4B 01            [ 1]  177 	push	#0x01
      00003A CDr00r00         [ 4]  178 	call	_CLK_ClockSwitchConfig
      00003D 5B 04            [ 2]  179 	addw	sp, #4
                                    180 ;	user/main.c: 35: CLK_PeripheralClockConfig(CLK_PERIPHERAL_SPI, ENABLE);
      00003F 4B 01            [ 1]  181 	push	#0x01
      000041 4B 01            [ 1]  182 	push	#0x01
      000043 CDr00r00         [ 4]  183 	call	_CLK_PeripheralClockConfig
      000046 85               [ 2]  184 	popw	x
                                    185 ;	user/main.c: 36: CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C, ENABLE);
      000047 4B 01            [ 1]  186 	push	#0x01
      000049 4B 00            [ 1]  187 	push	#0x00
      00004B CDr00r00         [ 4]  188 	call	_CLK_PeripheralClockConfig
      00004E 85               [ 2]  189 	popw	x
                                    190 ;	user/main.c: 37: CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC, DISABLE);
      00004F 4B 00            [ 1]  191 	push	#0x00
      000051 4B 13            [ 1]  192 	push	#0x13
      000053 CDr00r00         [ 4]  193 	call	_CLK_PeripheralClockConfig
      000056 85               [ 2]  194 	popw	x
                                    195 ;	user/main.c: 38: CLK_PeripheralClockConfig(CLK_PERIPHERAL_AWU, DISABLE);
      000057 4B 00            [ 1]  196 	push	#0x00
      000059 4B 12            [ 1]  197 	push	#0x12
      00005B CDr00r00         [ 4]  198 	call	_CLK_PeripheralClockConfig
      00005E 85               [ 2]  199 	popw	x
                                    200 ;	user/main.c: 39: CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART1, DISABLE);
      00005F 4B 00            [ 1]  201 	push	#0x00
      000061 4B 03            [ 1]  202 	push	#0x03
      000063 CDr00r00         [ 4]  203 	call	_CLK_PeripheralClockConfig
      000066 85               [ 2]  204 	popw	x
                                    205 ;	user/main.c: 40: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER1, DISABLE);
      000067 4B 00            [ 1]  206 	push	#0x00
      000069 4B 07            [ 1]  207 	push	#0x07
      00006B CDr00r00         [ 4]  208 	call	_CLK_PeripheralClockConfig
      00006E 85               [ 2]  209 	popw	x
                                    210 ;	user/main.c: 41: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2, DISABLE);
      00006F 4B 00            [ 1]  211 	push	#0x00
      000071 4B 05            [ 1]  212 	push	#0x05
      000073 CDr00r00         [ 4]  213 	call	_CLK_PeripheralClockConfig
      000076 85               [ 2]  214 	popw	x
                                    215 ;	user/main.c: 42: CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER4, ENABLE);
      000077 4B 01            [ 1]  216 	push	#0x01
      000079 4B 04            [ 1]  217 	push	#0x04
      00007B CDr00r00         [ 4]  218 	call	_CLK_PeripheralClockConfig
      00007E 85               [ 2]  219 	popw	x
      00007F 81               [ 4]  220 	ret
                                    221 ;	user/main.c: 45: INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
                                    222 ;	-----------------------------------------
                                    223 ;	 function TIM4_UPD_OVF_IRQHandler
                                    224 ;	-----------------------------------------
      000080                        225 _TIM4_UPD_OVF_IRQHandler:
      000080 62               [ 2]  226 	div	x, a
                                    227 ;	user/main.c: 47: TIM4_ClearITPendingBit(TIM4_IT_UPDATE);
      000081 4B 01            [ 1]  228 	push	#0x01
      000083 CDr00r00         [ 4]  229 	call	_TIM4_ClearITPendingBit
      000086 84               [ 1]  230 	pop	a
                                    231 ;	user/main.c: 48: TIMER_Inc();
      000087 CDr00r00         [ 4]  232 	call	_TIMER_Inc
      00008A 80               [11]  233 	iret
                                    234 ;	user/main.c: 71: void delay(uint16_t x)
                                    235 ;	-----------------------------------------
                                    236 ;	 function delay
                                    237 ;	-----------------------------------------
      00008B                        238 _delay:
      00008B 89               [ 2]  239 	pushw	x
                                    240 ;	user/main.c: 73: while(x--);
      00008C 1E 05            [ 2]  241 	ldw	x, (0x05, sp)
      00008E                        242 00101$:
      00008E 1F 01            [ 2]  243 	ldw	(0x01, sp), x
      000090 5A               [ 2]  244 	decw	x
      000091 16 01            [ 2]  245 	ldw	y, (0x01, sp)
      000093 26 F9            [ 1]  246 	jrne	00101$
      000095 85               [ 2]  247 	popw	x
      000096 81               [ 4]  248 	ret
                                    249 ;	user/main.c: 76: void main() 
                                    250 ;	-----------------------------------------
                                    251 ;	 function main
                                    252 ;	-----------------------------------------
      000097                        253 _main:
      000097 89               [ 2]  254 	pushw	x
                                    255 ;	user/main.c: 79: clock_setup();
      000098 CDr00r00         [ 4]  256 	call	_clock_setup
                                    257 ;	user/main.c: 80: TM1638_Init(GPIOC, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6);
      00009B 4B 40            [ 1]  258 	push	#0x40
      00009D 4B 20            [ 1]  259 	push	#0x20
      00009F 4B 10            [ 1]  260 	push	#0x10
      0000A1 4B 0A            [ 1]  261 	push	#0x0a
      0000A3 4B 50            [ 1]  262 	push	#0x50
      0000A5 CDr00r00         [ 4]  263 	call	_TM1638_Init
      0000A8 5B 05            [ 2]  264 	addw	sp, #5
                                    265 ;	user/main.c: 81: configDisplay(1, 0x07);
      0000AA 4B 07            [ 1]  266 	push	#0x07
      0000AC 4B 01            [ 1]  267 	push	#0x01
      0000AE CDr00r00         [ 4]  268 	call	_configDisplay
      0000B1 85               [ 2]  269 	popw	x
                                    270 ;	user/main.c: 83: TIMER_Init();
      0000B2 CDr00r00         [ 4]  271 	call	_TIMER_Init
                                    272 ;	user/main.c: 85: enableInterrupts();
      0000B5 9A               [ 1]  273 	rim
                                    274 ;	user/main.c: 86: TIMER_InitTime(&tick);
      0000B6 AEr00r00         [ 2]  275 	ldw	x, #_tick+0
      0000B9 1F 01            [ 2]  276 	ldw	(0x01, sp), x
      0000BB 1E 01            [ 2]  277 	ldw	x, (0x01, sp)
      0000BD 89               [ 2]  278 	pushw	x
      0000BE CDr00r00         [ 4]  279 	call	_TIMER_InitTime
      0000C1 85               [ 2]  280 	popw	x
                                    281 ;	user/main.c: 87: for(i = 0; i < 8; i++)
      0000C2 4F               [ 1]  282 	clr	a
      0000C3                        283 00118$:
                                    284 ;	user/main.c: 89: displayNumber(i, i, FALSE);
      0000C3 88               [ 1]  285 	push	a
      0000C4 4B 00            [ 1]  286 	push	#0x00
      0000C6 88               [ 1]  287 	push	a
      0000C7 88               [ 1]  288 	push	a
      0000C8 CDr00r00         [ 4]  289 	call	_displayNumber
      0000CB 5B 03            [ 2]  290 	addw	sp, #3
      0000CD 84               [ 1]  291 	pop	a
                                    292 ;	user/main.c: 87: for(i = 0; i < 8; i++)
      0000CE 4C               [ 1]  293 	inc	a
      0000CF A1 08            [ 1]  294 	cp	a, #0x08
      0000D1 25 F0            [ 1]  295 	jrc	00118$
                                    296 ;	user/main.c: 91: while(1) 
      0000D3                        297 00116$:
                                    298 ;	user/main.c: 103: if(TIMER_CheckTimeMS(&tick, 100) == 0)
      0000D3 16 01            [ 2]  299 	ldw	y, (0x01, sp)
      0000D5 4B 64            [ 1]  300 	push	#0x64
      0000D7 5F               [ 1]  301 	clrw	x
      0000D8 89               [ 2]  302 	pushw	x
      0000D9 4B 00            [ 1]  303 	push	#0x00
      0000DB 90 89            [ 2]  304 	pushw	y
      0000DD CDr00r00         [ 4]  305 	call	_TIMER_CheckTimeMS
      0000E0 5B 06            [ 2]  306 	addw	sp, #6
      0000E2 4D               [ 1]  307 	tnz	a
      0000E3 26 EE            [ 1]  308 	jrne	00116$
                                    309 ;	user/main.c: 105: key = getKey();
      0000E5 CDr00r00         [ 4]  310 	call	_getKey
                                    311 ;	user/main.c: 106: switch(key)
      0000E8 A1 08            [ 1]  312 	cp	a, #0x08
      0000EA 23 03            [ 2]  313 	jrule	00152$
      0000EC CCr01r5C         [ 2]  314 	jp	00128$
      0000EF                        315 00152$:
      0000EF 5F               [ 1]  316 	clrw	x
      0000F0 97               [ 1]  317 	ld	xl, a
      0000F1 58               [ 2]  318 	sllw	x
      0000F2 DEu00uF6         [ 2]  319 	ldw	x, (#00153$, x)
      0000F5 FC               [ 2]  320 	jp	(x)
      0000F6                        321 00153$:
      0000F6r01r5C                  322 	.dw	#00110$
      0000F8r01r08                  323 	.dw	#00102$
      0000FAr01r12                  324 	.dw	#00103$
      0000FCr01r1C                  325 	.dw	#00104$
      0000FEr01r26                  326 	.dw	#00105$
      000100r01r30                  327 	.dw	#00106$
      000102r01r3B                  328 	.dw	#00107$
      000104r01r46                  329 	.dw	#00108$
      000106r01r51                  330 	.dw	#00109$
                                    331 ;	user/main.c: 108: case 1: setLed(1, 0);
      000108                        332 00102$:
      000108 4B 00            [ 1]  333 	push	#0x00
      00010A 4B 01            [ 1]  334 	push	#0x01
      00010C CDr00r00         [ 4]  335 	call	_setLed
      00010F 85               [ 2]  336 	popw	x
                                    337 ;	user/main.c: 109: break;
      000110 20 C1            [ 2]  338 	jra	00116$
                                    339 ;	user/main.c: 110: case 2: setLed(1, 1);
      000112                        340 00103$:
      000112 4B 01            [ 1]  341 	push	#0x01
      000114 4B 01            [ 1]  342 	push	#0x01
      000116 CDr00r00         [ 4]  343 	call	_setLed
      000119 85               [ 2]  344 	popw	x
                                    345 ;	user/main.c: 111: break;
      00011A 20 B7            [ 2]  346 	jra	00116$
                                    347 ;	user/main.c: 112: case 3: setLed(1, 2);
      00011C                        348 00104$:
      00011C 4B 02            [ 1]  349 	push	#0x02
      00011E 4B 01            [ 1]  350 	push	#0x01
      000120 CDr00r00         [ 4]  351 	call	_setLed
      000123 85               [ 2]  352 	popw	x
                                    353 ;	user/main.c: 113: break;
      000124 20 AD            [ 2]  354 	jra	00116$
                                    355 ;	user/main.c: 114: case 4: setLed(1, 3);
      000126                        356 00105$:
      000126 4B 03            [ 1]  357 	push	#0x03
      000128 4B 01            [ 1]  358 	push	#0x01
      00012A CDr00r00         [ 4]  359 	call	_setLed
      00012D 85               [ 2]  360 	popw	x
                                    361 ;	user/main.c: 115: break;
      00012E 20 A3            [ 2]  362 	jra	00116$
                                    363 ;	user/main.c: 116: case 5: setLed(1, 4);
      000130                        364 00106$:
      000130 4B 04            [ 1]  365 	push	#0x04
      000132 4B 01            [ 1]  366 	push	#0x01
      000134 CDr00r00         [ 4]  367 	call	_setLed
      000137 85               [ 2]  368 	popw	x
                                    369 ;	user/main.c: 117: break;
      000138 CCr00rD3         [ 2]  370 	jp	00116$
                                    371 ;	user/main.c: 118: case 6: setLed(1, 5);
      00013B                        372 00107$:
      00013B 4B 05            [ 1]  373 	push	#0x05
      00013D 4B 01            [ 1]  374 	push	#0x01
      00013F CDr00r00         [ 4]  375 	call	_setLed
      000142 85               [ 2]  376 	popw	x
                                    377 ;	user/main.c: 119: break;
      000143 CCr00rD3         [ 2]  378 	jp	00116$
                                    379 ;	user/main.c: 120: case 7: setLed(1, 6);
      000146                        380 00108$:
      000146 4B 06            [ 1]  381 	push	#0x06
      000148 4B 01            [ 1]  382 	push	#0x01
      00014A CDr00r00         [ 4]  383 	call	_setLed
      00014D 85               [ 2]  384 	popw	x
                                    385 ;	user/main.c: 121: break;
      00014E CCr00rD3         [ 2]  386 	jp	00116$
                                    387 ;	user/main.c: 122: case 8: setLed(1, 7);
      000151                        388 00109$:
      000151 4B 07            [ 1]  389 	push	#0x07
      000153 4B 01            [ 1]  390 	push	#0x01
      000155 CDr00r00         [ 4]  391 	call	_setLed
      000158 85               [ 2]  392 	popw	x
                                    393 ;	user/main.c: 123: break;
      000159 CCr00rD3         [ 2]  394 	jp	00116$
                                    395 ;	user/main.c: 124: default:  
      00015C                        396 00110$:
                                    397 ;	user/main.c: 125: for(i = 0; i < 8; i++)
      00015C                        398 00128$:
      00015C 4F               [ 1]  399 	clr	a
      00015D                        400 00120$:
                                    401 ;	user/main.c: 127: setLed(0, i);
      00015D 88               [ 1]  402 	push	a
      00015E 88               [ 1]  403 	push	a
      00015F 4B 00            [ 1]  404 	push	#0x00
      000161 CDr00r00         [ 4]  405 	call	_setLed
      000164 85               [ 2]  406 	popw	x
      000165 84               [ 1]  407 	pop	a
                                    408 ;	user/main.c: 125: for(i = 0; i < 8; i++)
      000166 4C               [ 1]  409 	inc	a
      000167 A1 08            [ 1]  410 	cp	a, #0x08
      000169 25 F2            [ 1]  411 	jrc	00120$
                                    412 ;	user/main.c: 130: }
      00016B CCr00rD3         [ 2]  413 	jp	00116$
      00016E 85               [ 2]  414 	popw	x
      00016F 81               [ 4]  415 	ret
                                    416 	.area CODE
                                    417 	.area INITIALIZER
                                    418 	.area CABS (ABS)
